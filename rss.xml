<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Maze</title>
<link>https://susam.in/maze/</link>
<atom:link href="https://susam.in/maze/rss.xml"
           rel="self" type="application/rss+xml"/>
<description>Feed from Susam's Maze</description>

<item>
<title>The Epic Lisp Hack</title>
<link>https://susam.in/maze/epic-lisp-hack.html</link>
<guid>https://susam.in/maze/epic-lisp-hack.html</guid>
<description>
<![CDATA[
<p>
  There is a wonderful story about a legendary Lisp debugging story in
  the second chapter of the book <em>Practical Common Lisp</em> by
  Peter Seibel. Quoting the story here:
</p>
<blockquote>
  <p>
    An even more impressive instance of remote debugging occurred on
    NASA's 1998 Deep Space 1 mission. A half year after the space
    craft launched, a bit of Lisp code was going to control the
    spacecraft for two days while conducting a sequence of
    experiments. Unfortunately, a subtle race condition in the code
    had escaped detection during ground testing and was already in
    space. When the bug manifested in the wild--100 million miles away
    from Earth--the team was able to diagnose and fix the running
    code, allowing the experiments to complete. One of the
    programmers described it as follows:
  </p>
  <blockquote>
    <p>
      Debugging a program running on a $100M piece of hardware that is
      100 million miles away is an interesting experience. Having a
      read-eval-print loop running on the spacecraft proved invaluable
      in finding and fixing the problem.
    </p>
  </blockquote>
</blockquote>

<p><a href="https://susam.in/maze/epic-lisp-hack.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>Euler's Formula</title>
<link>https://susam.in/maze/euler-formula.html</link>
<guid>https://susam.in/maze/euler-formula.html</guid>
<description>
<![CDATA[
<p>
  I know that Euler's identity is widely regarded as the most beautiful
  theorem in mathematics. In my opinion, the truly beautiful concept
  involved here is Euler's formula:

  \[
  e^{ix} = \cos x + i \sin x.
  \]

  It unifies algebra, trigonometry, complex numbers, and calculus.
  Euler's identity is only a special case of Euler's formula, i.e.,
  Euler's formula with \( x = \pi \) gives us Euler's identity:

  \[
  e^{i \pi} = -1.
  \]

  This is cute but Euler's formula is truly beautiful. In fact with \( x
  = \tau = 2\pi, \) we get another cute result:

  \[
  e^{i \tau} = 1.
  \]

  Quoting an excerpt from Chapter 22 of <em>The Feynman Lectures on
  Physics, Volume I</em>:
</p>
<blockquote>
  <p>
    We summarize with this, the most remarkable formula in mathematics:

    \[
    e^{i \theta} = \cos \theta + i \sin \theta.
    \]

    This is our jewel.
  </p>
  <p>
    We may relate the geometry to the algebra by representing complex
    numbers in a plane; the horizontal position of a point is \( x, \)
    the vertical position of a point is \( y. \) We represent every
    complex number, \( x + iy. \) Then if the radial distance to this
    point is called \( r \) and the angle is called \( \theta, \) the
    algebraic law is that \( x + iy \) is written in the form \( r,
    e^{i \theta} \) where the geometrical relationships between \( x
    \) \( y, \) \( r, \) and \( \theta \) are as shown. This, then,
    is the unification of algebra and geometry.
  </p>
</blockquote>
<p>
  See the bottom of the page at
  <a href="https://www.feynmanlectures.caltech.edu/I_22.html">https://www.feynmanlectures.caltech.edu/I_22.html</a>
  for the above excerpt.
</p>

<p><a href="https://susam.in/maze/euler-formula.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>Algorithms Channel Migrates to Libera Chat</title>
<link>https://susam.in/maze/algorithms-channel-migrates-to-libera-chat.html</link>
<guid>https://susam.in/maze/algorithms-channel-migrates-to-libera-chat.html</guid>
<description>
<![CDATA[
<p>
  Our <code>##algorithms</code> that has been running on the Freenode
  IRC network for the last 14 years is now migrating to the Libera
  Chat IRC network. Our new channel name on Libera Chat
  is <code>#algorithms</code>.
</p>

<h2 id="history">History<a href="#history"></a></h2>
<p>
  The original <code>##algorithms</code> channel on Freenode IRC began
  as an offshoot of the <code>##math</code> channel there when we
  found that there was enough interest in the latter to form a channel
  dedicated to the subject of algorithms and data structures. I
  created the new channel for algorithms in 2007. I used to go by the
  nick <code>spal</code> and used to be active on both channels.
</p>
<p>
  What began as a tiny hobby club around algorithms gradually grew to
  be be a thriving community with over 200 members. I don't
  participate in the channel much anymore but a highly talented group
  of moderators helps maintain the channel.
</p>

<h2 id="migration">Migration<a href="#migration"></a></h2>
<p>
  The original Freenode staff that used to run the Freenode network
  has stepped down after a controversial change in management of
  Freenode. The former Freenode staff has now launched a new IRC
  network named <em>Libera Chat</em>. Thousands of channels that used
  to exist on Freenode IRC earlier have been rapidly migrating to
  Libera Chat now. For more on the events that led to this mass
  migration, see this
  post: <a href="https://gist.github.com/joepie91/df80d8d36cd9d1bde46ba018af497409">The
  Freenode Resignation FAQ</a>.
</p>
<p>
  The <code>##algorithms</code> channel too has now moved from
  Freenode to Libera Chat. Our new channel name
  is <code>#algorithms</code> on Libera Chat. Our entire operator team
  for the channel is also moving to the new channel. The old channel
  on Freenode should now be considered defunct.
</p>

<h2 id="old-channel-information">Old Channel Information<a href="#old-channel-information"></a></h2>
<p>
  Here is the last known good state of the <code>##algorithms</code>
  channel on Freenode before we declared the channel defunct.
</p>
<pre>
<samp><kbd>/msg chanserv info ##algorithms</kbd>
Information on ##algorithms:
Founder    : spal
Successor  : halberd
Registered : Oct 13 19:49:56 2007 (13y 31w 5d ago)
Mode lock  : +ntcC
Flags      : GUARD
*** End of Info ***</samp>
</pre>

<h2 id="new-channel-information">New Channel Information<a href="#new-channel-information"></a></h2>
<p>
  Here is the current information of the new channel
  named <code>#algorithms</code> on Libera Chat.
</p>
<pre>
<samp><kbd>/msg chanserv info #algorithms</kbd>
Information on #algorithms:
Founder    : susam
Successor  : libera-placeholder-account
Registered : May 19 14:52:38 2021 +0000 (2h ago)
Mode lock  : +nt-lk
Flags      : GUARD PUBACL
*** End of Info ***</samp>
</pre>

<h2 id="join">Join<a href="#join"></a></h2>
<p>
  If you are new to the world of IRC, here are some steps to join the
  Libera Chat IRC network:
</p>
<ol>
  <li>
    <p>
      Install Irssi, an IRC chat client. On macOS, enter the following
      command if you have Homebrew:
    </p>
    <pre><code>brew install irssi</code></pre>
    <p>
      On Debian, Ubuntu, or another Debian-based Linux system, enter
      the following command:
    </p>
    <pre><code>sudo apt-get install irssi</code></pre>
    <p>
      For other systems or environments,
      see <a href="https://irssi.org/">irssi.org</a>.
  </li>
  <li>
    <p>
      Enter the following command to connect to Libera Chat:
    </p>
    <pre><code>irssi -c irc.libera.chat</code></pre>
  </li>
  <li>
    <p>
      Now type these IRC commands into Irssi to join some channels:
    </p>
    <pre>
<code>/join #algorithms
/join #irssi
/join #libera
/join #linux</code>
</pre>
  </li>
  <li>
    <p>
      Enter this IRC command into Irssi to send me a message if you
      need any help:
    </p>
    <pre><code>/msg susam hello</code></pre>
  </li>
</ol>
<p>
  You can also join the algorithms channel via Libera Chat's web
  interface
  at <a href="https://web.libera.chat/#algorithms">web.libera.chat</a>.
  This can be useful for those who want to join the network quickly
  without installing a client. Further there is a Matrix bridge to the
  channel accessible
  via <a href="https://app.element.io/#/room/#algorithms:libera.chat">#algorithms:libera.chat</a>.
  The Matrix bridge is quite convenient for someone unfamiliar with
  IRC. For example, you can close your browser or client and your chat
  session will still stay alive on the Matrix bridge. You can connect
  back the next day and catch up with the messages. Doing that with
  IRC requires setting up an IRC bouncers which may feel like
  considerable additional work.
</p>

<h2 id="freenode-wipes-database">Freenode Wipes Database<a href="#freenode-wipes-database"></a></h2>
<p>
  <strong>Update on 15 Jun 2021:</strong> All old communities on the
  Freenode IRC network are now gone. The new Freenode staff has wiped
  out their database thereby resetting the state of their network. We
  learnt about this when we received these global notices in our
  clients connected to the Freenode IRC network:
</p>
<pre>
<samp>-root- [Global Notice 1/3] We are moving past legacy freenode to a new
       fork. The new freenode is launched. You will slowly be
       disconnected and when you reconnect, you will be on the new
       freenode. We patiently await to welcome you in freedom's
       holdout - the freenode.

-root- [Global Notice 2/3] If you're looking to connect now, you can
       already /server chat.freenode.net 6697 (ssl) or 6667
       (plaintext). It's a new genesis for a new era. Thank you for
       using freenode, and Hello World, from the future. freenode is
       IRC. freenode is FOSS. freenode is freedom.

-root- [Global Notice 3/3] When you connect, register your nickname
       and your channel and get started. It's a new world. We're so
       happy to welcome you and the millions of others. We will be
       posting more information in the coming days on our website and
       twitter. Otherwise, see you on the other side!</samp>
</pre>
<p>
  See this thread on Reddit for a discussion on this
  event: <a href="https://www.reddit.com/r/irc/comments/o01tmv">reddit.com/r/irc/comments/o01tmv</a>.
</p>
<p>
  What this really means is that decades old nicks and channels are
  completely wiped out! For example, my own 15 year old nick is now
  gone. Our algorithms channel on the Freenode network is also gone.
  All the nicks and other channels I was familiar with are also gone.
  I am not going to bother registering my nick and our channel there
  again! It is not worth it. We have all moved on to Libera Chat
  already and there is nothing left on Freenode to care about it
  anymore.
</p>

<p><a href="https://susam.in/maze/algorithms-channel-migrates-to-libera-chat.html">Read on website</a></p>
]]>
</description>
<pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>May the Forth Be With You</title>
<link>https://susam.in/maze/may-the-forth-be-with-you.html</link>
<guid>https://susam.in/maze/may-the-forth-be-with-you.html</guid>
<description>
<![CDATA[
<p>
  I wrote a tiny Forth program today to celebrate the Star Wars Day!
  Today, i.e., May 4 is the Star Wars Day. The date (May the fourth)
  is a pun on the popular Star Wars catchphrase, "May the Force be
  with you." Forth, the programming language, is named so as a
  shortened form of the word "Fourth". The name stood for "fourth
  generation". Quoting
  from <a href="https://web.archive.org/web/20160409083846/http://www.colorforth.com/HOPL.html">Forth
  - The Early Years</a>:
</p>
<blockquote>
  The file holding the interpreter was labeled FORTH, for 4th (next)
  generation software - but the operating system restricted file names
  to 5 characters.
</blockquote>
<p>
  So the Forth program presented in this post to print a slightly
  altered Star Wars catchphrase using ASCII stars (asterisks) is like
  a double pun! Or is that a triple pun?
</p>
<p>
  Also, if Yoda were a programmer, I think Forth would be his most
  favourite programming language. Yoda would say, "A Forth programmer
  I am. Hrmmm," and he would add two and two with, <code>2 2 +</code>.
  It just makes a lot of sense to celebrate May the 4th with some
  Forth programming.
</p>
<p>
  Here is the program I wrote to celebrate the day:
</p>
<pre>
<code>: stars
   0  do  [char] * emit  loop  ;

: lines
   0  do  cr  loop  ;

: print
   dup 40 > if  40 - lines  else
   dup 20 > if  20 - spaces  else
      stars
   then then  ;

: start
   0  do  print  loop  ;

                      41 11 37 11 36 5 28 41 5 27 5
                     31 5 27 5 33 5 28 41 5 31 5 27
                    5 31 5 31  5 28 41 5  33 5 25 5
                   33 5 30 5 28 41 5 35 5 23 5 35 5
                  29 5 28 41  5 35 5 23 5 35 5 27 9
                 26 41 5 35  5 23 5 35  5 26 5 21 5
                25 41 5 35 5 23 5 35 5 25 5 23 5 24
               41 5 35 5 24 5 33  5 25 5 25 5 23 41
              5 35 5  25 5 31 5   25 5 27 5 22 41 5
             35 5 27 5 27 5 26    5 29 5 21 41 5 35
            5 30 11 28 5 31 5     43 2 24 2 25 2 25
           2  26 1 26 1 28 8      23 7 33 41 2 24 2
          25 2 25 2 25 3 24       3 33 2  22 1 25 2
         33 41 8 25 2 25 2        24 2 21 2 22 2 21
        2 29 5 23 7 33 41         2 24 2  25 2 25 2
       23 2 24 3 23 2 31          2 22 1 25 2 33 41
      2 24 2  22 8 22 2           22 2 26 1 25 2 24
     8 23 7 22 11 43 3            27 3 27 3 26 3 28
    3 26 8  35 3 41 3             27 3 27 3 27 3 27
   3  24 3 26 3 33 3              41 3 27 3 27 3 28
  3 26 3 23 3  28 3               32 3 41 3 27 3 27
 3 29 3  25 3 22 3                30 3 31  3  41 13
27 3  29 11  22 3 30 3 25 9 41 13 27 3 27 13 22 3 30 3 25 9
41 3 27 3 27 3 26 3 28 3  22 3 30 3 31 3  41 3 27 3 27 3 26
3 28 3 23 3 28 3 32 3 41 3 27 3 22 13 22 13 24 4 25 3 23 13
41 3 27 3 22 13 24 11  26 8 25 13 43 11 22 8 22 2 24 2 25 2
30 2 23 2 25 2 22 2 23 1 23 2 41 2 22 2 24 2 25 2 30 2 24 7
23 2 22 3 22 2 41 5 22 8 25 2 29 4 24 2 21 2 24 2 21 2 21 2
                                  21  2 41 2  22  2
                                  24 2 25 2 28 2 22
                                  2 24 3 25 4 23  4
                                  41  8 22 2  24  2
                                  22 8 24 2 24 2 24
                                  1  26 3 25  3 473
start
bye</code>
</pre>
<p>
  Here is the output:
</p>
<pre>
<samp>***     ***      *    **    **    ********  **    **  ********
****   ****     ***    **  **        **     **    **  **
** ** ** **    ** **    ****         **     ********  *****
**  ***  **   *******    **          **     **    **  **
**   *   **  **     **   **          **     **    **  ********  ***********


*************     ********      ***********    *************  ***       ***
*************   ***     ****    *************  *************  ***       ***
***            ***        ***   ***        ***      ***       ***       ***
***           ***          ***  ***        ***      ***       ***       ***
*********     ***          ***  *************       ***       *************
*********     ***          ***  ***********         ***       *************
***           ***          ***  ***     ***         ***       ***       ***
***            ***        ***   ***      ***        ***       ***       ***
***             ***      ***    ***       ***       ***       ***       ***
***               ********      ***        ***      ***       ***       ***


***********  *******   ********    **     *      **  **  ********  **    **
             **     *  **           **   ***    **   **     **     **    **
             *******   *****         ** **  ** **    **     **     ********
             **     *  **             ***    ***     **     **     **    **
             *******   ********        *      *      **     **     **    **


*****           *****        ***********          *****               *****
 *****         *****      *****       *****       *****               *****
  *****       *****     *****           *****     *****               *****
   *****     *****     *****             *****    *****               *****
    *****   *****     *****               *****   *****               *****
     ***** *****      *****               *****   *****               *****
      *********       *****               *****   *****               *****
        *****         *****               *****   *****               *****
        *****          *****             *****     *****             *****
        *****           *****           *****       *****           *****
        *****             *****       *****           *****       *****
        *****                ***********                 ***********</samp>
</pre>
<p>
  To run this program on your system and obtain the above output,
  follow these steps:
</p>
<ol>
  <li>
    <p>
      Install GForth. On macOS, enter the following command if you
      have Homebrew:
    </p>
    <pre><code>brew install gforth</code></pre>
    <p>
      On Debian, Ubuntu, or another Debian-based Linux system, enter
      the following command:
    </p>
    <pre><code>sudo apt-get install gforth</code></pre>
    <p>
      For other systems or environments,
      see <a href="https://gforth.org/">gforth.org</a>.
    </p>
  </li>
  <li>
    <p>
      Save the above program in a file, say, <code>may4.fs</code> and
      run it with this command:
    </p>
    <pre><code>gforth may4.fs</code></pre>
  </li>
  <li>
    <p>
      Enjoy!
    </p>
  </li>
</ol>
<p>
  If you do not know Forth but found this post fun and want to learn a
  little bit of Forth,
  see <a href="https://www.forth.com/starting-forth/">Starting
  Forth</a>.
</p>
<p>
  The Forth program in this post and the output is also available as a
  Git repository
  here: <a href="https://github.com/susam/may4">github.com/susam/may4</a>.
</p>
<p>
  By the way, Forth brings back the fun in computing for me that I
  once experienced when I began learning to code with Logo. It is
  simple, distraction-free, and fun! I will conclude this post with a
  famous quote from Alan J. Perlis:
</p>
<blockquote>
I think that it's extraordinarily important that we in computer
science keep fun in computing. When it started out, it was an awful
lot of fun. Of course, the paying customers got shafted every now and
then, and after a while we began to take their complaints seriously.
We began to feel as if we really were responsible for the successful,
error-free perfect use of these machines. I don't think we are. I
think we're responsible for stretching them, setting them off in new
directions, and keeping fun in the house. I hope the field of computer
science never loses its sense of fun.
</blockquote>    


<p><a href="https://susam.in/maze/may-the-forth-be-with-you.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>Dark Night Skies</title>
<link>https://susam.in/maze/dark-night-skies.html</link>
<guid>https://susam.in/maze/dark-night-skies.html</guid>
<description>
<![CDATA[
<p>
  Having grown up in a small town in the 1990s, I used to get pretty
  dark skies at night. The night sky combined with a few books on
  amateur astronomy from our school's library really fuelled my desire
  to understand the universe and our place in it.
</p>
<p>
  I got photocopies of two star charts (for both hemispheres) off a
  book I found in our school library and began using the star chart
  for the northern hemisphere to study the night sky. The winter sky
  was and still is my favourite. To spot the easily recognizable Orion
  constellation and know that its second brightest star with the
  distinctly reddish hue is a red supergiant star that could explode
  any day was fascinating.
</p>
<p>
  The 1990s were also a great time to grow up for an astronomy
  enthusiast like me. Two bright comets visited our neighbourhood in
  1996-1997. First Comet Hyakutake visited us in March 1996 and then
  Comet Hale-Bopp became spectacularly bright in April 1997.
</p>
<p>
  Now 23 years later, as an adult living in a severely light-polluted
  city, the recent Geminids meteor shower was rather disappointing. My
  wife and I went to our terrace to watch the meteor shower after
  midnight. A nice dark sky would have let us see about 2-4 meteors
  shooting across the sky every minute. But we did not have a nice
  dark sky. The whole sky was lit orange. As a kid, I would have never
  imagined a sky could have such a colour at night! We could spot only
  a meteor or two every 5-10 minutes.
</p>
<p>
  I think it is very unfortunate that kids growing up in cities today
  do not get to see the beautiful night sky the way I did during my
  childhood days. A clear, dark night sky can be a great source of
  inspiration and wonder for children.
</p>

<p><a href="https://susam.in/maze/dark-night-skies.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Of Course "changeme" Is Valid Base64</title>
<link>https://susam.in/maze/of-course-changeme-is-valid-base64.html</link>
<guid>https://susam.in/maze/of-course-changeme-is-valid-base64.html</guid>
<description>
<![CDATA[
<p>
  Today, I came across
  this <a href="https://3fx.ch/blog/2019/12/09/changeme-is-valid-base64/">blog
  post</a> regarding how the author of the post used the
  string <code>"changeme"</code> as test data while testing a Base64
  decoding functionality in their application. However, the author
  incorrectly believed that this test data is not a valid
  Base64-encoded string and therefore would fail to decode
  successfully when decoded as Base64. To their surprise, they found
  that this string <code>"changeme"</code> does in fact decode
  successfully.
</p>
<p>
  The post did not go any further into understanding why
  indeed <code>"changeme"</code> is a valid Base64-encoded string and
  why it can successfully be decoded into binary data. It appears that
  the author was using Base64 encoding scheme as a black box.
</p>
<p>
  I think it is worth noting and illustrating that any alphanumeric
  string with a length that is a multiple of 4 is a valid
  Base64-encoded string. Here are some examples that illustrate this:
</p>
<pre>
<samp>$ <kbd>printf AAAA | base64 --decode | od -tx1</kbd>
0000000    00  00  00
0000003
$ <kbd>printf AAAAAAAA | base64 --decode | od -tx1</kbd>
0000000    00  00  00  00  00  00
0000006
$ <kbd>printf AQEB | base64 --decode | od -tx1</kbd>
0000000    01  01  01
0000003
$ <kbd>printf AQID | base64 --decode | od -tx1</kbd>
0000000    01  02  03
0000003
$ <kbd>printf main | base64 --decode | od -tx1</kbd>
0000000    99  a8  a7
0000003
$ <kbd>printf scrabble | base64 --decode | od -tx1</kbd>
0000000    b1  ca  da  6d  b9  5e
0000006
$ <kbd>printf 12345678 | base64 --decode | od -tx1</kbd>
0000000    d7  6d  f8  e7  ae  fc
0000006</samp>
</pre>
<p>
  Further, since <code>+</code> and <code>/</code> are also used as
  symbols in Base64 encoding (for binary <code>111110</code>
  and <code>111111</code>, respectively), we also have a few more
  intersting examples:
</p>
<pre>
<samp>$ <kbd>printf 1+2+3+4+5/11 | base64 --decode | od -tx1</kbd>
0000000    d7  ed  be  df  ee  3e  e7  fd  75
0000011
$ <kbd>printf "\xd7\xed\xbe\xdf\xee\x3e\xe7\xfd\x75" | base64</kbd>
1+2+3+4+5/11</samp>
</pre>
<p>
  I think it is good to understand why any string with a length that
  is a multiple of 4 turns out to be a valid Base64-encoded string.
  The Base64 encoding scheme encodes each group of 6 bits in the
  binary input with a chosen ASCII character. For every possible 6-bit
  binary value, we have assigned an ASCII character that appears in
  the Base64-encoded string. Each output ASCII character can be one of
  the 64 carefully chosen ASCII characters: lowercase and uppercase
  letters from the English alphabet, the ten digits from the Arabic
  numerals, the plus sign (<code>+</code>) and the forward slash
  (<code>/</code>). For example, the bits <code>000000</code> is
  encoded as <code>A</code>, the bits <code>000001</code> is encoded
  as <code>B</code>, and so on. The equals sign (<code>=</code>) is
  used for padding but that is not something we will discuss in detail
  in this post.
</p>
<p>
  The smallest positive multiple of 6 that is also a multiple of 8 is
  24. Thus every group of 3 bytes (24 bits) of binary data is
  translated to 4 ASCII characters in its Base64-encoded string. Thus
  the entire input data is divided into groups of 3 bytes each and
  then each group of 3 bytes is encoded into 4 ASCII characters. What
  if the last group is less than 3 bytes long? There are certain
  padding rules for such cases but I will not discuss them right now
  in this post. For more details on the padding rules,
  see <a href="https://datatracker.ietf.org/doc/html/rfc4648">RFC
  4648</a>.
</p>
<p>
  Now as a natural result of the encoding scheme, it turns out that
  any 4 alphanumeric characters is a valid Base64 encoding of some
  binary data. That's because for every alphanumeric character, we can
  find some 6-bit binary data that would be translated to it during
  Base64 encoding. This is the reason why any alphanumeric string with
  a length that is a multiple of 4 is a valid Base64-encoded string
  and can be successfully decoded to some binary data.
</p>


<p><a href="https://susam.in/maze/of-course-changeme-is-valid-base64.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Hacktoberfest Spam</title>
<link>https://susam.in/maze/hacktoberfest-spam.html</link>
<guid>https://susam.in/maze/hacktoberfest-spam.html</guid>
<description>
<![CDATA[
<p>
  I received two pull requests for two of my projects on GitHub today.
  I am the author of one and the maintainer of the other.
</p>
<p>
  At first, the pull requests did not make sense at all. One of them
  made minor changes to a README, e.g., changing "this book" to "the
  book". It did not fix a typo or grammatical error. It merely chose a
  word different from the one I had chosen. In fact, I preferred "this
  book", so the pull request (PR) was inconsistent with my preference.
  There was no explanation whatsoever regarding why this change was
  warranted. Then I looked at the pull request author's profile and
  found that the same person had submitted several such trivial pull
  requests to other projects too, all of them changing "this" to "the"
  at some places in various README files.
</p>
<p>
  It all began to make sense when I looked at the calendar. It was Oct
  01. This looked like pull request spam due to Hacktoberfest. For
  now, I just labelled the pull requests as "invalid" (as suggested by
  the <a href="https://hacktoberfest.digitalocean.com/faq/">Hacktoberfest
  FAQ</a>), closed the pull requests, and moved on.
</p>
<p>
  Like all good things created with good intentions on the Internet,
  spam is hurting this event and bringing bad reputation to it. The
  possibility of large scale, endless spam should be worked into the
  design of any new Internet-based event or solution.
</p>

<p><a href="https://susam.in/maze/hacktoberfest-spam.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Unix Timestamp 1600000000</title>
<link>https://susam.in/maze/unix-timestamp-1600000000.html</link>
<guid>https://susam.in/maze/unix-timestamp-1600000000.html</guid>
<description>
<![CDATA[
<p>
  At 2020-09-13 12:26:40 UTC, the Unix timestamp is going to turn
  1600000000.
</p>

<h2 id="unix-timestamp-conversion">Unix Timestamp Conversion<a href="#unix-timestamp-conversion"></a></h2>
<p>
  The following subsections show a few examples of converting the Unix
  timestamp to a human-readable date.
</p>

<h3 id="python">Python<a href="#python"></a></h3>
<pre>
<samp>$ <kbd>python3 -q</kbd>
>>> <kbd>from datetime import datetime</kbd>
>>> <kbd>datetime.utcfromtimestamp(1_600_000_000)</kbd>
datetime.datetime(2020, 9, 13, 12, 26, 40)</samp>
</pre>

<h3 id="gnu-date">GNU date (Linux)<a href="#gnu-date"></a></h3>
<pre>
<samp>$ <kbd>date -ud @1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>

<h3 id="bsd-date">BSD date (macOS, FreeBSD, OpenBSD, etc.)<a href="#bsd-date"></a></h3>
<pre>
<samp>$ <kbd>date -ur 1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>

<h2 id="other-such-dates">Other Such Dates<a href="#other-such-dates"></a></h2>
<p>
All such dates (in UTC) until the end of the current century:
</p>
<pre>
$ <kbd>python3 -q</kbd>
>>> <kbd>from datetime import datetime</kbd>
>>> <kbd>for t in range(0, 4_200_000_000, 100_000_000):</kbd>
... <kbd>    print(f'{t:13_d} - {datetime.utcfromtimestamp(t)}')
...
            0 - 1970-01-01 00:00:00
  100_000_000 - 1973-03-03 09:46:40
  200_000_000 - 1976-05-03 19:33:20
  300_000_000 - 1979-07-05 05:20:00
  400_000_000 - 1982-09-04 15:06:40
  500_000_000 - 1985-11-05 00:53:20
  600_000_000 - 1989-01-05 10:40:00
  700_000_000 - 1992-03-07 20:26:40
  800_000_000 - 1995-05-09 06:13:20
  900_000_000 - 1998-07-09 16:00:00
1_000_000_000 - 2001-09-09 01:46:40
1_100_000_000 - 2004-11-09 11:33:20
1_200_000_000 - 2008-01-10 21:20:00
1_300_000_000 - 2011-03-13 07:06:40
1_400_000_000 - 2014-05-13 16:53:20
1_500_000_000 - 2017-07-14 02:40:00
1_600_000_000 - 2020-09-13 12:26:40
1_700_000_000 - 2023-11-14 22:13:20
1_800_000_000 - 2027-01-15 08:00:00
1_900_000_000 - 2030-03-17 17:46:40
2_000_000_000 - 2033-05-18 03:33:20
2_100_000_000 - 2036-07-18 13:20:00
2_200_000_000 - 2039-09-18 23:06:40
2_300_000_000 - 2042-11-19 08:53:20
2_400_000_000 - 2046-01-19 18:40:00
2_500_000_000 - 2049-03-22 04:26:40
2_600_000_000 - 2052-05-22 14:13:20
2_700_000_000 - 2055-07-24 00:00:00
2_800_000_000 - 2058-09-23 09:46:40
2_900_000_000 - 2061-11-23 19:33:20
3_000_000_000 - 2065-01-24 05:20:00
3_100_000_000 - 2068-03-26 15:06:40
3_200_000_000 - 2071-05-28 00:53:20
3_300_000_000 - 2074-07-28 10:40:00
3_400_000_000 - 2077-09-27 20:26:40
3_500_000_000 - 2080-11-28 06:13:20
3_600_000_000 - 2084-01-29 16:00:00
3_700_000_000 - 2087-04-01 01:46:40
3_800_000_000 - 2090-06-01 11:33:20
3_900_000_000 - 2093-08-01 21:20:00
4_000_000_000 - 2096-10-02 07:06:40
4_100_000_000 - 2099-12-03 16:53:20</samp>
</pre>

<h2 id="update">Update<a href="#update"></a></h2>
<p>
  Here is a screenshot I took at Unix timestamp 1600000000:
  <a href="https://twitter.com/susam/status/1305120936098627589">twitter.com/susam/status/130512093609862758</a>.
</p>
<p>
Reproduced as text below:
</p>
<pre>
<samp>$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:39 UTC 2020
Sun Sep 13 17:56:39 IST 2020
1599999999
$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:40 UTC 2020
Sun Sep 13 17:56:40 IST 2020
1600000000</samp>
</pre>
<p>
An important point worth noting from the POSIX.1-2008 specification:
</p>
<blockquote>
Coordinated Universal Time (UTC) includes leap seconds. However, in
POSIX time (seconds since the Epoch), leap seconds are ignored (not
applied) to provide an easy and compatible method of computing time
differences. Broken-down POSIX time is therefore not necessarily UTC,
despite its appearance.
</blockquote>
<p>
See <a href="https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16">&sect;
A.4.16</a> of the POSIX.1-2008 specification for more details.
</p>

<p><a href="https://susam.in/maze/unix-timestamp-1600000000.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Pointers in K&amp;R</title>
<link>https://susam.in/maze/pointers-in-knr.html</link>
<guid>https://susam.in/maze/pointers-in-knr.html</guid>
<description>
<![CDATA[
<p>
  I learnt C from the book <em>The C Programming Language, 2nd
  ed.</em> (K&amp;R) written by Brian Kernighan and Dennis Ritchie
  about 18 years ago during my engineering studies. The subject of
  pointers was generally believed to be scary among fellow students
  and many of them bought pretty fat books that were dedicated solely
  to the topic of pointers. However, when I reached Chapter 5 of the
  book , I found that it did a wonderful job at teaching pointers in
  merely 34 pages. The chapter opens with this sentence:
</p>
<blockquote>
  A pointer is a variable that contains the address of a variable.
</blockquote>
<p>
  The exact point at which the whole topic of pointers became crystal
  clear was when I encountered this sentence in &sect; 5.3 Pointers
  and Arrays:
</p>
<blockquote>
  Rather more surprising, at first sight, is the fact that a reference
  to <code>a[i]</code> can also be written as <code>*(a+i)</code>.
</blockquote>
<p>
  Indeed, it was easy to confirm that by compiling and running the
  following program:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main() {
    int a[] = {2, 3, 5, 7, 11};
    printf("%d\n", *(a + 2));
    printf("%d\n", a[2]);
    printf("%d\n", 2[a]);
    return 0;
}</code>
</pre>
<p>
  The output is:
</p>
<pre>
<samp>5
5
5</samp>
</pre>
<p>
  C was the first serious programming language I was learning back
  then and at that time, I don't think I could have come across a
  better book than K&amp;R to learn this subject. Like many others, I
  too feel that this book is a model for technical writing. I wish
  more technical books were written like this with clear presentation
  and concise treatment.
</p>

<p><a href="https://susam.in/maze/pointers-in-knr.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Leap Year Test in K&amp;R</title>
<link>https://susam.in/maze/leap-year-test-in-knr.html</link>
<guid>https://susam.in/maze/leap-year-test-in-knr.html</guid>
<description>
<![CDATA[
<p>
  I learnt the following test for leap year early in my programming
  life from the book <em>The C Programming Language, 2nd ed.</em>
  (K&amp;R) written by Brian Kernighan and Dennis Ritchie about 18
  years ago during my engineering studies. &sect; 2.5
  (Arithmetic Operators) of the book uses the following test:
</p>
<pre>
<code>(year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0</code>
</pre>
<p>
  By the way, the following test also works:
</p>
<pre>
<code>year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0)</code>
</pre>

<p><a href="https://susam.in/maze/leap-year-test-in-knr.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Sticking With MathJax</title>
<link>https://susam.in/maze/sticking-with-mathjax.html</link>
<guid>https://susam.in/maze/sticking-with-mathjax.html</guid>
<description>
<![CDATA[
<p>
  I have considered switching from MathJax to KaTeX for my
  MathJax-based projects such
  as <a href="https://github.com/susam/texme">TeXMe</a>
  and <a href="https://github.com/susam/mathbin">MathBin</a> but I had
  to decide against doing so because MathJax supports commands
  like <code>\label</code>, <code>\eqref</code>, <code>\notag</code>,
  etc. and environments
  like <code>align</code>, <code>multiline</code>, etc. KaTeX does not
  support them, so switching to KaTeX would break many existing
  documents written using TeXMe or MathBin. I am going to stick with
  MathJax for now.
</p>
<p>
  Here are some useful resources:
</p>
<ul>
  <li>
    <a href="http://docs.mathjax.org/en/latest/input/tex/macros/">MathJax: Supported TeX/LaTeX commands</a>
  </li>
  <li>
    <a href="https://katex.org/docs/supported.html">KaTeX: Supported Functions</a>
  </li>
</ul>

<p><a href="https://susam.in/maze/sticking-with-mathjax.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Debian Releases and Toy Story</title>
<link>https://susam.in/maze/debian-releases-and-toy-story.html</link>
<guid>https://susam.in/maze/debian-releases-and-toy-story.html</guid>
<description>
<![CDATA[
<p>
  Did you know that Debian releases are named after characters from
  the <em>Toy</em> Story films? I began using it with Debian 4 (Etch)
  in 2007. It was named after Etch A Sketch, one of Andy's toys. The
  latest release, Debian 10 (Buster), is named after Andy's pet puppy.
</p>
<p>
  The name Debian itself is a portmanteau of the names Ian Murdock
  (the creator of Debian) and Debra Lynn (his then-girlfriend, later
  ex-wife). As a result, this name has been called a <em>curiously
  personal name for such a community-oriented project</em>.
</p>
<p>
  I was using Fedora and Ubuntu in 2007 when a member of a local Linux
  User Group (LUG) introduced me to Debian. Its simplicity and
  elegance, its vast package repository, and its stability and
  robustness made me an ardent user of this distribution pretty
  quickly. Thirteen years later, I still use Debian on my laptops,
  Linode servers, and virtual machines. I run
  my <a href="https://susam.in/">personal website</a> on Debian too. I
  have got so used to <code>apt-get install</code> and the large
  number of tools available in the Debian repositories that I keep a
  Debian virtual machine or a remote shell handy when I am working on
  a non-Debian system. Over these years, I have gradually moved from
  GNOME 2 to GNOME 3 and then to Xfce 4. It really helps that Debian
  still provides an installation CD with Xfce as the default. In case
  anyone is interested, I have documented and shared
  my <a href="https://github.com/susam/dotfiles/blob/master/docs/debian-setup.md">Debian
  setup notes on GitHub</a>.
</p>

<p><a href="https://susam.in/maze/debian-releases-and-toy-story.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Zero Point Leet Seconds</title>
<link>https://susam.in/maze/zero-point-leet-seconds.html</link>
<guid>https://susam.in/maze/zero-point-leet-seconds.html</guid>
<description>
<![CDATA[
<p>
  While computing certain round-trip times, here is a number I came
  across that is not easy to forget: It takes light 0.1337 seconds to
  travel once around the Earth's equator via vacuum or air. Let me
  repeat that. It takes light "zero point leet" seconds to travel once
  around the equator.
</p>
<p>
  The equatorial radius of the Earth is about 6378.137 km. The
  equatorial circumference of the Earth then is about 40075 km. The
  speed of light in vacuum is 299792.458 km/s by definition. The speed
  of light in air is about 299705 km/s. Therefore, it takes light
  about 40075/299792.458 seconds in vacuum and about 40075/299705
  seconds in air to travel once around the equator. Both values can be
  written as 0.1337 seconds accurate up to 4 decimal places.
</p>

<p><a href="https://susam.in/maze/zero-point-leet-seconds.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
</item>
<item>
<title>C Standard Terms for Behaviour</title>
<link>https://susam.in/maze/c-standard-terms-for-behaviour.html</link>
<guid>https://susam.in/maze/c-standard-terms-for-behaviour.html</guid>
<description>
<![CDATA[
<p>
  Here are some excerpts from the final drafts of the C99 and C11
  standards <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">n1256.pdf</a>
  and <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">n1570.pdf</a>,
  respectively.
</p>
<ul>
  <li>
    <p>
      <strong>§3.4.0: behavior:</strong> external appearance or action
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.1: implementation-defined behavior:</strong>
      unspecified behavior where each implementation documents how the
      choice is made.
    </p>
    <p>
      EXAMPLE: An example of implementation-defined behavior is the
      propagation of the high-order bit when a signed integer is
      shifted right.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.2: locale-specific behavior:</strong> behavior that
      depends on local conventions of nationality, culture, and
      language that each implementation documents.
    </p>
    <p>
      EXAMPLE: An example of locale-specific behavior is whether the
      <code>islower</code> function returns true for characters other
      than the 26 lowercase Latin letters.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.3: undefined behavior:</strong> behavior, upon use
      of a nonportable or erroneous program construct or of erroneous
      data, for which this International Standard imposes no
      requirements.
    </p>
    <p>
      NOTE: Possible undefined behavior ranges from ignoring the
      situation completely with unpredictable results, to behaving
      during translation or program execution in a documented manner
      characteristic of the environment (with or without the issuance
      of a diagnostic message), to terminating a translation or
      execution (with the issuance of a diagnostic message).
    </p>
    <p>
      EXAMPLE: An example of undefined behavior is the behavior on
      integer overflow.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.4: unspecified behavior:</strong> use of an
      unspecified value, or other behavior where this International
      Standard provides two or more possibilities and imposes no
      further requirements on which is chosen in any instance.
    </p>
    <p>
      EXAMPLE: An example of unspecified behavior is the order in
      which the arguments to a function are evaluated.
    </p>
  </li>
</ul>

<p><a href="https://susam.in/maze/c-standard-terms-for-behaviour.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
</item>
<item>
<title>Building Common Lisp Executables</title>
<link>https://susam.in/maze/building-common-lisp-executables.html</link>
<guid>https://susam.in/maze/building-common-lisp-executables.html</guid>
<description>
<![CDATA[
<p>
  Since Common Lisp is a language standard (not an implementation) it
  is hard to provide a single set of instructions or guidelines that
  would work for all implementations. There are various
  implementations of Common Lisp that target native machine code, C
  code, bytecode, JVM, etc. So the build instructions, project
  structure, etc. depend on the target.
</p>

<h2 id="using-sbcl">Using SBCL<a href="#using-sbcl"></a></h2>
<p>
  Here is a minimal example that builds a Lisp program into a binary
  executable with SBCL:
</p>
<p>
<pre>
<code>(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)</code>
</pre>
<p>
  The SBCL-specific <code>save-lisp-and-die</code> function saves the
  Lisp process as a core image. The <code>:executable t</code> keyword
  argument includes the SBCL runtime in the image to ensure that the
  image is a standalone executable. This is why the executable for
  even a simple hello-world program tends to be quite large (30 MB to
  50 MB)! The <code>:toplevel</code> argument specifies the function
  to run when the core file is run.
</p>
<p>
  Here are some example commands to get you started:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)
$ <kbd>sbcl --load hello.lisp</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="moving-unportable-code-to-command-line-argument">Moving Unportable Code to Command Line Argument<a href="#moving-unportable-code-to-command-line-argument"></a></h2>
<p>
  If you would rather not have SBCL specific code in the Lisp source
  code file, then you could move
  the <code>sb-ext:save-lisp-and-die</code> call out of your source
  file to the SBCL command invocation. The source code now looks like
  this:
</p>
<pre>
<samp>(defun main ()
  (format t "hello, world~%"))</samp>
</pre>
<p>
  The shell commands now look like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
$ <kbd>sbcl --load hello.lisp --eval "(sb-ext:save-lisp-and-die \"hello\" :executable t :toplevel #'main)"</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="using-buildapp">Using Buildapp<a href="#using-buildapp"></a></h2>
<p>
  By the way, there is
  also <a href="https://www.xach.com/lisp/buildapp/">Buildapp</a> that
  provides a layer of abstraction for building executables from Lisp
  programs. It works with SBCL and CCL. It requires the toplevel
  function to be called with an argument though. Therefore the source
  code needs to be modified to the following:
</p>
<pre>
<code>(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))</code>
</pre>
<p>
Then Buildapp can be invoked like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))
$ <kbd>buildapp --load hello.lisp --entry main --output hello</kbd>
;; loading file #P"/Users/susam/hello.lisp"
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>  

<p><a href="https://susam.in/maze/building-common-lisp-executables.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
</item>
<item>
<title>Non-Commercial Licenses Are Non-Free Licenses</title>
<link>https://susam.in/maze/non-commercial-licenses-are-non-free-licenses.html</link>
<guid>https://susam.in/maze/non-commercial-licenses-are-non-free-licenses.html</guid>
<description>
<![CDATA[
<p>
  I have had to explain this a couple of times on various forums, so I
  thought it would be good to write a post about it and explain why
  non-commercial licenses are non-free licenses. Some examples of
  non-commercial licenses
  are
  <a href="https://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC</a>,
  <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA</a>, and
  <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC
  BY-NC-ND</a>. These are all non-free licenses.
</p>
<p>
  The fact that non-commercial licenses happen to be non-free licenses
  appear to be counterintuitive to some. Isn't prohibiting the usage
  of some artefacts for commercial purpose good for free artefacts?
  Maybe it is. May be it is not. That is irrelevant while deciding
  whether a license is considered free or not. What is relevant though
  is whether the license satisfies the principles laid out in some of
  the widely followed principles of freedom in creative work.
  Especially in the context of software, such as for licensing
  artefacts related to software development and usage, we have a few
  widely accepted guidelines that we can refer to:
</p>
<ul>
  <li>
    <a href="https://www.gnu.org/philosophy/free-sw.en.html">Free
    Software Definition (FSD)</a>
  </li>
  <li>
    <a href="https://www.debian.org/social_contract">Debian Free
    Software Guidelines (DFSG)</a>
  </li>
  <li>
    <a href="https://opensource.org/osd">Open Source Definition
    (OSD)</a>
  </li>
</ul>
<p>
  Note that when we say "free" here, we mean free as in speech, not
  free as in beer. Prohibiting commercial usage of some work violates
  these principles of software freedom mentioned in the documents
  referenced above:
</p>
<ul>
  <li>
    <p>
      Freedom 0 of the Free Software Definition (FSD): The freedom to
      run the program as you wish, for any purpose (freedom 0).
    </p>
  </li>
  <li>
    <p>
      Point 6 of the Debian Free Software Guidelines (DFSG): No
      Discrimination Against Fields of Endeavor: The license must not
      restrict anyone from making use of the program in a specific
      field of endeavor. For example, it may not restrict the program
      from being used in a business, or from being used for genetic
      research.
    </p>
  </li>
  <li>
    <p>
      Point 6 of the Open Source Definition (OSD): No Discrimination
      Against Fields of Endeavor: The license must not restrict anyone
      from making use of the program in a specific field of endeavor.
      For example, it may not restrict the program from being used in
      a business, or from being used for genetic research.
    </p>
  </li>
</ul>
<p>
  By the way, the OSD was originally derived from the DFSG. That is
  why the OSD looks quite similar to the DFSG.
</p>
<p>
  So what does this all mean and why should you care? The
  non-commercial licenses are good at doing what they are meant to do,
  that is, prevent commercial exploitation of your work. If that is
  what you want, the non-commercial licenses are perfect for you. But
  it is worth noting that restricting non-commercial usage does come
  at the cost of unhindered collaboration. For example, a work
  licensed under CC BY-NC, CC BY-NC-SA, or CC BY-NC-ND cannot be
  remixed, adapted, or relicensed with work licensed under the CC BY
  or CC BY-SA.
</p>
<p>
  If you want unhindered
  collaboration, <a href="https://creativecommons.org/licenses/by/4.0/">CC
  BY</a> is one of the most permissive licenses available from
  Creative Commons. There is
  also <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>
  which gets as close to public domain as
  possible. <a href="https://creativecommons.org/licenses/by-sa/4.0/">CC
  BY-SA</a> is another good option if you want to ensure that one
  cannot remix your work into some proprietary work and redistribute
  it. But note that even CC BY-SA requires that you do not impose any
  additional restrictions to the license terms. That is, even CC BY-SA
  allows commercial usage and is incompatible with any non-commercial
  license.
</p>

<p><a href="https://susam.in/maze/non-commercial-licenses-are-non-free-licenses.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
</item>
<item>
<title>Magical Chameleons Puzzle</title>
<link>https://susam.in/maze/magical-chameleons-puzzle.html</link>
<guid>https://susam.in/maze/magical-chameleons-puzzle.html</guid>
<description>
<![CDATA[
<p>
  An island contained chameleons of three different colours: red,
  green and blue. The chameleons were studied by some biologists and
  they found that when two chameleons of different colours met they
  changed their colours to the third one. They found that there were
  2000 red chameleons and 3000 green ones on the day they counted
  them. They didn't get time to count the number of blue chameleons.
</p>
<p>
  When the biologists returned to the island two months later they
  found that all chameleons were red in colour. They were certain that
  no chameleons died because they did not find dead remains of any
  chameleon. What does it say about the number of blue chameleons on
  the day the biologists counted the number of red and green
  chameleons?
</p>
<p>
  See the comments page for the solution.
</p>

<p><a href="https://susam.in/maze/magical-chameleons-puzzle.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 19 Jun 2011 00:00:00 +0000</pubDate>
</item>
<item>
<title>Calendar Cubes Puzzle</title>
<link>https://susam.in/maze/calendar-cubes-puzzle.html</link>
<guid>https://susam.in/maze/calendar-cubes-puzzle.html</guid>
<description>
<![CDATA[
<p>
  How many different ways are there to assign the ten digits of Arabic
  numerals (0 to 9) to each face of two cubes to ensure that we can
  arrange both cubes on any day such that the front faces of the cubes
  show the current day of the month?
</p>
<p>
  For example, on February 9 the cubes would be placed side by side
  such that the front face of the cube on the left side shows 0 and
  that of the one on the right side shows 9.
</p>
<p>
  Two ways of assigning the digits to the faces of the cubes are
  considered different if and only if it is not possible to get one
  assignment from the other by performing one or more of the following
  operrations:
</p>
<ol>
  <li>
    Rotating (reorienting) the digits with respect to the faces they
    belong to.
  </li>
  <li>
    Rotating the cubes.
  </li>
  <li>
    Swapping the cubes.
  </li>
</ol>
<p>
  See the comments page for the solution.
</p>


<p><a href="https://susam.in/maze/calendar-cubes-puzzle.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 12 Jun 2011 00:00:00 +0000</pubDate>
</item>
<item>
<title>Math Storm</title>
<link>https://susam.in/maze/math-storm.html</link>
<guid>https://susam.in/maze/math-storm.html</guid>
<description>
<![CDATA[
<p>
  From Freenode IRC <code>#math</code> channel this morning:
</p>
<pre>
<samp>&lt;oops&gt; I have a confusion. the calculation that was giving
       me 2 bits earlier is not giving me 2 bits now. :( please help.
&lt;oops&gt; 4 equally probable symbols: so 4 * (1/4) * log(1 / 1/4), right?
&lt;antonfire&gt; yeah math changes sometimes.
&lt;antonfire&gt; probably a math storm
&lt;antonfire&gt; wait a few minutes and try again
&lt;_Ray_&gt; try logging out and back in
&lt;oops&gt; so, so 1 * log(4) = 2
&lt;oops&gt; oh it is giving me 2 bits again
&lt;mariano|syzygy&gt; hmmm, actually he was not his advisor
&lt;oops&gt; thanks, nvm.
&lt;sig^&gt; try switching math off and on again
&lt;thermoplyae&gt; haha
&lt;_Ray_&gt; yeah, it was the router</samp>
</pre>

<p><a href="https://susam.in/maze/math-storm.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 15 May 2011 00:00:00 +0000</pubDate>
</item>
<item>
<title>Missing Digit Puzzle</title>
<link>https://susam.in/maze/missing-digit-puzzle.html</link>
<guid>https://susam.in/maze/missing-digit-puzzle.html</guid>
<description>
<![CDATA[
<p>
  There is a 10-digit multiple of 234. 9 of its digits in ascending
  order are: 0, 1, 1, 2, 3, 4, 5, 7 and 9. What is the missing digit?
</p>
<p>
  See the comments page for the solution.
</p>

<p><a href="https://susam.in/maze/missing-digit-puzzle.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 14 May 2011 00:00:00 +0000</pubDate>
</item>
<item>
<title>Ternary Operator Puzzle</title>
<link>https://susam.in/maze/ternary-operator-puzzle.html</link>
<guid>https://susam.in/maze/ternary-operator-puzzle.html</guid>
<description>
<![CDATA[
<p>
  What is the shortest statement you can write in the C or C++
  programming language to express the following statement?
</p>
<pre><code>a = (a == 0 ? 0 : 1);</code></pre>
<p>
  See the comments page for the solution.
</p>

<p><a href="https://susam.in/maze/ternary-operator-puzzle.html">Read on website</a></p>
]]>
</description>
<pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
</item>
<item>
<title>Polar Bear Puzzle</title>
<link>https://susam.in/maze/polar-bear-puzzle.html</link>
<guid>https://susam.in/maze/polar-bear-puzzle.html</guid>
<description>
<![CDATA[
<p>
  Alice asked Bob, "A bear walked 1 km south, then 1 km west, then 1
  km north, and it was back at the point from where it started. What
  colour was the bear most likely to be?"
</p>
<p>
  Bob thought for a while, could not arrive at an answer, and gave up.
  Alice explained, "Well, the answer is white. It is a polar bear. It
  is only when you start from the North Pole that after travelling 1
  km south, 1 km west, and 1 km north you would end up at the point
  where you started."
</p>
<p>
  Bob replied, "That is an interesting solution. Now that I understand
  your solution, I realize that there are other starting points apart
  from the North Pole where one could walk 1 km south, then 1 km west,
  and then 1 km north to return to the starting point."
</p>
<p>
  Can you find all the other such starting points that Bob is talking
  about?
</p>
<p>
  See the comments page for the solution.
</p>

<p><a href="https://susam.in/maze/polar-bear-puzzle.html">Read on website</a></p>
]]>
</description>
<pubDate>Wed, 09 Mar 2011 00:00:00 +0000</pubDate>
</item>
<item>
<title>Shrinking List Puzzle</title>
<link>https://susam.in/maze/shrinking-list-puzzle.html</link>
<guid>https://susam.in/maze/shrinking-list-puzzle.html</guid>
<description>
<![CDATA[
<p>
  The first \( 9 \) natural numbers are given in a list. You are
  supposed to select two numbers randomly from the list, call them \(
  x \) and \( y \), remove them from the list and insert \( x + y + xy
  \) into the list. You keep repeating this until you are left with
  only one number in the list. Find the final number that is left in
  the list.
</p>
<p>
  See the comments page for the solution.
</p>

<p><a href="https://susam.in/maze/shrinking-list-puzzle.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 17 Feb 2011 00:00:00 +0000</pubDate>
</item>
<item>
<title>Squaring Numbers That Begin or End With 5</title>
<link>https://susam.in/maze/squaring-numbers-that-begin-or-end-with-5.html</link>
<guid>https://susam.in/maze/squaring-numbers-that-begin-or-end-with-5.html</guid>
<description>
<![CDATA[
<p>
  In this post, I will discuss some simple tricks I use to square
  numbers that begin or end with the digit \( 5 \). We will first see
  a few illustrations of each trick. Then we will generalize the
  tricks for any number that begins or ends with the digit \( 5 \).
</p>

<h2 id="squaring-a-2-digit-number-that-ends-with-5">Squaring a 2-Digit Number That Ends With 5<a href="#squaring-a-2-digit-number-that-ends-with-5"></a></h2>
<p>
  I learnt this from an arithmetic book during my childhood days. If
  the first digit of a 2-digit number is \( a \) and the second digit
  is \( 5 \) in decimal representation, then its square can then be
  written as the result of \( a \times (a + 1) \) followed by \( 25 \)
  in decimal representation, i.e., the first few digits of the square
  is given by \( a \times (a + 1) \) and the last two digits are \( 25
  \). Here are some examples:
</p>
<ul>
  <li>\( 25^2 = 625. \) (Note that \( 2 \times 3 = 6. \))</li>
  <li>\( 85^2 = 7225. \) (Note that \( 8 \times 9 = 72. \))</li>
</ul>

<h2 id="squaring-a-2-digit-number-that-begins-with-5">Squaring a 2-Digit Number That Begins With 5<a href="#squaring-a-2-digit-number-that-begins-with-5"></a></h2>
<p>
  After learning the previous trick, I wondered if I could make more
  such tricks for myself. This is the first one I could come up with.
  If the first digit of a 2-digit number is \( 5 \) and the second
  digit is \( a \), then its square can be written as the result of \(
  25 + a \) followed by \( a^2 \). In other words, the first two
  digits of the square are obtained from the result of \( 25 + a \)
  and the last two digits are obtained from the result of \( a^2 \).
  Here are some examples:
</p>
<ul>
  <li>\( 52^2 = 2704. \) (Note that \( 25 + 2 = 27 \) and \( 2^2 = 4. \))</li>
  <li>\( 57^2 = 3249. \) (Note that \( 25 + 7 = 32 \) and \( 7^2 = 49. \))</li>
</ul>

<h2 id="squaring-any-number-that-ends-with-5">Squaring Any Number That Ends with 5<a href="#squaring-any-number-that-ends-with-5"></a></h2>
<p>
  Let us represent all digits except the last one as \( a \), e.g., if
  we are given the number \( 115 \), we say, \( a = 11 \). Then we can
  express the given number algebraically as \( 10a + 5 \). Note that
  the square of this number is

  \[
  (10a + 5)^2 = 100a(a + 1) + 25.
  \]

  In decimal representation, this amounts to writing the result of \(
  a(a + 1) \) followed by \( 25. \) Here are some examples:
</p>
<ul>
  <li>\( 115^2 = 13225. \) (Note that \( 11 \times 12 = 132. \))</li>
  <li>\( 9995^2 = 99900025. \) (Note that \( 999 \times 1000 = 999000. \))</li>
</ul>

<h2 id="squaring-any-number-that-begins-with-5">Squaring Any Number That Begins With 5<a href="#squaring-any-number-that-begins-with-5"></a></h2>
<p>
  Let us represent all digits except the first one as \( a \), e.g.,
  if we are given the number \( 512 \), we say, \( a = 12 \). Then we
  can express the given number algebraically as \( 5 \times 10^n + a
  \) where \( n \) is the number of digits in \( a \). Note that

  \[
  (5 \times 10^n + a)^2 = 25 \times 10^{2n} + 10^{n + 1} a + a^2.
  \]

  In decimal reprensetation, this amounts to performing the following
  steps:
</p>
<ol>
  <li>
    Write \( 25 \) as the first two digits.
  </li>
  <li>
    Then write \( a^2 \) as a \( 2n \)-digit number immediately after
    \( 25 \). Prefix \( a^2 \) with appropriate number of \( 0 \)s so
    that \( a^2 \) is written with \( 2n \) digits.
  </li>
  <li>
    Write the \( + \)-sign directly below the first digit, that is,
    write the \( + \)-sign directly before the first \( 2 \).
  </li>
  <li>
    Write every digit of \( a \) including any preceding \( 0 \)s
    immediately after the \( + \)-sign.
  </li>
  <li>
    Finally add the numbers in both rows column by column performing
    the carrying operation whenever necessary.
  </li>
</ol>
<p>
  Here are some examples:

  \[
  502^2 = \\
  \left\{ \begin{array}{cccccc}
  2 & 5 & 0 & 0 & 0 & 4 \\
  + & 0 & 2 \\
  \hline
  2 & 5 & 2 & 0 & 0 & 4
  \end{array} \right\} = 252004.
  \]

  \[
  512^2 = \\
  \left\{ \begin{array}{cccccc}
  2 & 5 & 0 & 1 & 1 & 4 \\
  + & 1 & 2 \\
  \hline
  2 & 6 & 2 & 1 & 1 & 4
  \end{array} \right\} = 262114.
  \]

  \[
  564^2 = \\
  \left\{ \begin{array}{cccccc}
  2 & 5 & 4 & 0 & 9 & 6 \\
  + & 6 & 4 \\
  \hline
  3 & 1 & 8 & 0 & 9 & 6 \\
  \end{array} \right\} = 318096.
  \]

</p>

<h2 id="applying-both-tricks-together">Applying Both Tricks Together<a href="#applying-both-tricks-together"></a></h2>
<p>
  Let us now see an example where we use both the tricks together. Let
  us find \( 5195^2 \). This is a number that begins with the digit \(
  5 \) as well as ends with the digit \( 5 \). We need to use the
  second trick to find \( 5195^2 \). But the second trick begins with
  writing \( 25 \) immediately followed by the result of \( 195^2 \),
  so we use the first trick to calculate \( 195^2 \).
</p>
<p>
  To write the result of \( 195^2 \), we first write \( 380 \) which
  we obtain as the result of \( 19 \times 20 \) and then we write \(
  25 \) immediately after it. Thus \( 195^2 = 38025 \). Now we
  perform the second trick as follows:

  \begin{align*}
  5195^2 =
  \left\{ \begin{array}{cccccccc}
  2 & 5 & 0 & 3 & 8 & 0 & 2 & 5 \\
  + & 1 & 9 & 5 \\
  \hline
  2 & 6 & 9 & 8 & 8 & 0 & 2 & 5
  \end{array} \right\} = 26988025.
  \end{align*}
</p>

<p><a href="https://susam.in/maze/squaring-numbers-that-begin-or-end-with-5.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 21 Dec 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Timing With Curl</title>
<link>https://susam.in/maze/timing-with-curl.html</link>
<guid>https://susam.in/maze/timing-with-curl.html</guid>
<description>
<![CDATA[
<p>
  Here is a command I use often while measuring why an HTTP request is
  taking too long:
</p>
<pre>
<code>curl -L -w "time_namelookup: %{time_namelookup}
time_connect: %{time_connect}
time_appconnect: %{time_appconnect}
time_pretransfer: %{time_pretransfer}
time_redirect: %{time_redirect}
time_starttransfer: %{time_starttransfer}
time_total: %{time_total}
" https://example.com/</code>
</pre>
<p>
  Here is the same command written as a one-liner, so that I can copy it easily from this page with a triple-click whenever I need it in future:
</p>
<pre><code>curl -L -w "time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n" https://example.com/</code></pre>
<p>
  Here is how the output of the above command typically looks:
</p>
<pre>
<samp>$ <kbd>curl -L -w "namelookup: %{time_namelookup}\nconnect: %{time_connect}\nappconnect: %{time_appconnect}\npretransfer: %{time_pretransfer}\nstarttransfer: %{time_starttransfer}\ntotal: %{time_total}\n" https://example.com/</kbd>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
...
&lt;/html&gt;
time_namelookup: 0.001403
time_connect: 0.245464
time_appconnect: 0.757656
time_pretransfer: 0.757823
time_redirect: 0.000000
time_starttransfer: 0.982111
time_total: 0.982326</samp>
</pre>
<p>
  In the output above, I have omitted most of the HTML output and
  replaced the omitted part with ellipsis for the sake of brevity.
</p>
<p>
  The list below provides a description of each number in the output
  above. This information is picked straight from the manual page of
  curl 7.20.0. Here are the details:
</p>
<ul>
  <li>
    <p>
      <em>time_namelookup:</em> The time, in seconds, it took from the
      start until the name resolving was completed.
    </p>
  </li>
  <li>
    <p>
      <em>time_connect:</em> The time, in seconds, it took from the
      start until the TCP connect to the remote host (or proxy) was
      completed.
    </p>
  </li>
  <li>
    <p>
      <em>time_appconnect:</em> The time, in seconds, it took from the
      start until the SSL/SSH/etc connect/handshake to the remote host
      was completed. (Added in 7.19.0)
    </p>
  </li>
  <li>
    <p>
      <em>time_pretransfer:</em> The time, in seconds, it took from
      the start until the file transfer was just about to begin. This
      includes all pre-transfer commands and negotiations that are
      specific to the particular protocol(s) involved.
    </p>
  </li>
  <li>
    <p>
      <em>time_redirect:</em> The time, in seconds, it took for all
      redirection steps include name lookup, connect, pretransfer and
      transfer before the final transaction was started. time_redirect
      shows the complete execution time for multiple redirections.
      (Added in 7.12.3)
    </p>
  </li>
  <li>
    <p>
      <em>time_starttransfer:</em> The time, in seconds, it took from
      the start until the first byte was just about to be transferred.
      This includes time_pretransfer and also the time the server
      needed to calculate the result.
    </p>
  <li>
    <p>
      <em>time_total:</em> The total time, in seconds, that the full
      operation lasted. The time will be displayed with millisecond
      resolution.
    </p>
  </li>
</ul>
<p>
  An important thing worth noting here is that the difference in the
  numbers for <code>time_appconnect</code>
  and <code>time_connect</code> time tells us how much time is spent
  in SSL/TLS handshake. For a cleartext connection without SSL/TLS,
  this number is reported as zero. Here is an example output that
  demonstrates this:
</p>
<pre>
<samp>$ <kbd>curl -L -w "time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n" http://example.com/</kbd>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
...
&lt;/html&gt;
time_namelookup: 0.001507
time_connect: 0.247032
time_appconnect: 0.000000
time_pretransfer: 0.247122
time_redirect: 0.000000
time_starttransfer: 0.512645
time_total: 0.512853</samp>
</pre>
<p>
  Also note that <code>time_redirect</code> is zero in both outputs
  above. That is because no redirection occurs while visiting
  <a href="https://example.com">example.com</a>. Here is another
  example that shows how the output looks when a redirection occurs:
</p>
<pre>
<samp>$ <kbd>curl -L -w "time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n" https://susam.in/blog</kbd>
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
...
&lt;/html&gt;
time_namelookup: 0.001886
time_connect: 0.152445
time_appconnect: 0.465326
time_pretransfer: 0.465413
time_redirect: 0.614289
time_starttransfer: 0.763997
time_total: 0.765413</samp>
</pre>
<p>
  When faced with a potential latency issue in web services, this is
  often one of the first commands I run several times from multiple
  clients because the results form this command help to get a quick
  sense of the layer that might be responsible for the latency issue.
</p>

<p><a href="https://susam.in/maze/timing-with-curl.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 10 Jul 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Big-Endian on Little-Endian</title>
<link>https://susam.in/maze/big-endian-on-little-endian.html</link>
<guid>https://susam.in/maze/big-endian-on-little-endian.html</guid>
<description>
<![CDATA[
<p>
  In this post, I will share how I set up big-endian emulation on my
  little-endian Intel machine to tets a program for byte order related
  issues. I used the QEMU PowerPC emulator to set up the big-endian
  emulation. The steps to do so are documented in the list below.
</p>
<ol>
  <li>
    <p>
      Install QEMU.
    </p>
    <pre><code>apt-get update &amp;&amp; apt-get install qemu</code></pre>
  </li>
  <li>
    <p>
      Download <code>mol-0.9.72.1.tar.bz2</code> from
      <a href="http://sourceforge.net/projects/mac-on-linux/files/">http://sourceforge.net/projects/mac-on-linux/files/</a>
      and copy the file named <code>video.x</code> from the downloaded
      tarball to
      <code>/usr/share/qemu/</code>. This is necessary to
      prevent <code>qemu-system-ppc</code> from complaining about it.
    </p>
    <pre>
<code>wget https://sourceforge.net/projects/mac-on-linux/files/mac-on-linux/mol-0.9.72.1/mol-0.9.72.1.tar.bz2
tar -xjf mol-0.9.72.1.tar.bz2
sudo cp mol-0.9.72.1/mollib/drivers/video.x /usr/share/qemu/</code>
</pre>
  </li>
  <li>
    <p>
      Create a QEMU hard disk image.
    </p>
    <pre><code>qemu-img create powerpc.img 2G</code></pre>
  </li>
  <li>
    <p>
      Download Debian for PowerPC and install it on the QEMU hard disk
      image.
    </p>
    <pre>
<code>wget http://cdimage.debian.org/debian-cd/5.0.4/powerpc/iso-cd/debian-504-powerpc-CD-1.iso
qemu-system-ppc -m 512 -boot d -hda powerpc.img -cdrom debian-504-powerpc-CD-1.iso</code>
</pre>
  </li>
  <li>
    <p>
      Boot the QEMU PowerPC emulator with the new hard disk image.
    </p>
    <pre><code>qemu-system-ppc -m 512 -hda powerpc.img</code></pre>
  </li>
  <li>
    <p>
      Write a small program inside the new Debian system,
      say, <code>endian.c</code> like this:
    </p>
    <pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int n = 1;
    printf(*((char *) &amp;n) ? "little-endian\n" : "big-endian\n");
    return 0;
}</code>
</pre>
  </li>
  <li>
    <p>
      Compile and execute the C program.
    </p>
    <pre>
<code>$ <kbd>gcc endian.c && ./a.out</kbd>
big-endian</code>
</pre>
  </li>
</ol>

<p><a href="https://susam.in/maze/big-endian-on-little-endian.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 20 Jun 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Laws of Correction</title>
<link>https://susam.in/maze/laws-of-correction.html</link>
<guid>https://susam.in/maze/laws-of-correction.html</guid>
<description>
<![CDATA[
<h2 id="mckean-law">McKean's Law<a href="#mckean-law"></a></h2>
<blockquote>
  Any correction of the speech or writing of others will contain at
  least one grammatical, spelling, or typographical error.
</blockquote>

<h2 id="skitt-law">Skitt's Law<a href="#skitt-law"></a></h2>
<blockquote>
  Any post correcting an error in another post will contain at least
  one error itself.
</blockquote>

<h2 id="muphry-law">Muphry's Law<a href="#muphry-law"></a></h2>
<blockquote>
  If you write anything criticizing editing or proofreading, there
  will be a fault of some kind in what you have written.
</blockquote>

<h2 id="hartman-law">Hartman's Law of Prescriptivist Retaliation<a href="#hartman-law"></a></h2>
<blockquote>
  Any article or statement about correct grammar, punctuation, or
  spelling is bound to contain at least one eror.
</blockquote>

<p><a href="https://susam.in/maze/laws-of-correction.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 18 Jun 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Correctly Printing STAFString</title>
<link>https://susam.in/maze/correctly-printing-stafstring.html</link>
<guid>https://susam.in/maze/correctly-printing-stafstring.html</guid>
<description>
<![CDATA[
<p>
  At RSA, we use <a href="http://staf.sourceforge.net/">Software
  Testing Automation Framework (STAF)</a> to automate testing our
  products. Recently, I ran into a bug that occurred due
  to <code>STAFResult::STAFString</code> not being null-terminated.
  Here is an example C++ program that demonstrates the issue:
</p>
<pre>
<code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

#include "STAF.h"
#include "STAFString.h"

int main(int argc, char **argv)
{
    STAFString name("foo");
    STAFHandlePtr handle;

    int rc = STAFHandle::create(name, handle);
    if (rc != 0) {
        std::cerr &lt;&lt; "Could not create STAF handle; error code: "
                  &lt;&lt; rc &lt;&lt; endl;
        return 1;
    }

    STAFResultPtr result = handle-&gt;submit("127.0.0.1", "VAR",
                                          "RESOLVE STRING {STAF/Env/DUMMY}");
    if (result-&gt;rc != 0) {
        std::cerr &lt;&lt; "Could not run STAF command; error code: "
                  &lt;&lt; rc &lt;&lt; "\n";
        return 1;
    }

    STAFString output = result-&gt;result;
    std::cout &lt;&lt; "Output: " &lt;&lt; output.buffer() &lt;&lt; "\n";
}</code>
</pre>
<p>
  Here is an example output of the above program:
</p>
<pre>
<samp>C:\&gt;<kbd>echo %DUMMY%</kbd>
Why__does__it__break
C:\&gt;<kbd>STAFExperiments.exe</kbd>
Output: Why__does__it__break/Env/DUMMY}}
</pre>
<p>
The substring <code>/Env/DUMMY</code> at the end of the output is
garbage. The result is not null-terminated in the output buffer. Here
is the correct way to print the output:
</p>
<pre>
<code>std::cout &lt;&lt; "Output: " &lt;&lt; string(output.buffer(), output.length()) &lt;&lt; "\n";</code>
</pre>

<p><a href="https://susam.in/maze/correctly-printing-stafstring.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 04 Jun 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>UID Numbering Scheme</title>
<link>https://susam.in/maze/uid-numbering-scheme.html</link>
<guid>https://susam.in/maze/uid-numbering-scheme.html</guid>
<description>
<![CDATA[
<p>
Some thoughts
on <a href="http://web.archive.org/web/20100704211109/www.uidai.gov.in/documents/A_UID_Numbering_Scheme.pdf">A
UID Numbering Scheme</a> published
by <a href="http://web.archive.org/web/20100523144720/http://uidai.gov.in/">Unique
    Identification Authority of India (UIDAI)</a>.
</p>
<ol>
  <li>
    <p>
      <strong>Process for De-duplication</strong> (page 5):
    </p>
    <blockquote>
      Since biometric information contain no ordering and hence cannot
      be indexed like text based information, when a resident applies
      for a UID with his/her fingerprints, iris and photo of face,
      these biometrics have to be compared against the entire UID
      database (existing residents with UIDs) to ensure that this new
      applicant is indeed unique and has not already been allotted a
      UID (even under a different name, address etc). This 1:N
      biometric comparison (N=size of the UID database) is the most
      compute intensive operation of the UID server systeem.
    </blockquote>
    <p>
      It sounds as if the search operation would take O(N) time. Why
      can't the data be treated as binary numbers that can be ordered
      and indexed? It'll improve the search time to at least O(log N)
      time and possibly even further to O(1) time if a hashtable is
      used. The performance improvement is going to be huge since N is
      as large as 1.2 billion.
    </p>
  </li>
  <li>
    <p>
      <strong>Memorization of UID</strong> (page 6):
    </p>
    <blockquote>
      This section is about how long the string length should be. In
      short, the string has to be as short as possible but that meets
      density requirement and does not include alphabet characters,
      just numbers. It is important to keep the UID simple and small
      to help residents to remember their number.
    </blockquote>
    <blockquote>
      Firstly the use of the hindu-arabic numeral
      system(0,1,2,3,4,5,6,7,8,9) is suggested since these numerals
      are recognized/used by the largest subset of people in the
      country. Secondly we suggest the use of 12 digits (11 + 1 check
      sum) since 11 digits gives us a 100 billion number space which in
      turn can provide a low density of used numbers.
    </blockquote>
    <p>
      I don't think a 12 digit UID is easy to memorize. However, I
      agree that this length is necessary to ensure unique UIDs for a
      large population like India's. The population of India is about
      1.2 billion now. Now issuing 1.2 billion UIDs from a maximum
      possible space of 100 billion numbers implies that any UID
      chosen at random has a 1.2% probability of being a valid UID
      issued to someone. In other words, 1 out of every 83 possible
      UID values is a valid UID issued to someone. Therefore, these
      UIDs should not be treated as secret. It should be assumed that
      an adversary can easily guess valid UIDs issued to actual
      residents.
    </p>
    <p>
      Note that this problem gets worse as the population of India
      grows. Currently, it is growing at the rate of about 1.4% every
      year. The growth rate is expected to slow down in future. For
      now, I will assume that the growth rate is never going to exceed
      1.4% to get a conservative estimate. Then by the year 2050, the
      population of India would not exceed 2.1 billion. Then the
      probability that a randomly generated UID is an actual UID
      issued to a resident would increase to 2.1%.
    </p>
    <p>
      Therefore, any critical operation performed using a UID must
      perform an independent verification, such as two-factor
      authentication, SMS-based verification, etc. to ensure that the
      operation is approved by the actual resident the UID is issued
      to.
    </p>
  </li>
  <li>
    <p>
      <strong>UID static PIN and dynamic PIN</strong> (page 7):
    </p>
    <blockquote>
      In order to authenticate (ascertain it is who s/he claims to be) a
      resident needs to provide his/her UID number as well as say a
      biometric marker – such as a fingerprint.
    </blockquote>
    <p>
      Using biometrics while issuing UIDs may be fine. But using
      biometrics for other important transactions might put the
      resident at risk. For example, see this BBC news story:
      <a href="http://web.archive.org/web/20050528103727/http://news.bbc.co.uk/2/hi/asia-pacific/4396831.stm">Malaysia Car Thieves Steal Finger</a>.
  </li>
  <li>
    <p>
      <strong>Principles and Requirements</strong> (page 11):
    </p>
    <blockquote>
      Number Generation: The numbers are generated in a random,
      non-repeating sequence. There are several approaches to doing
      this in the computer science literature. The algorithm and any
      "seed" chosen to generate IDs should not be made public and
      should be considered a national secret.
    </blockquote>
    <p>
      This violates Shannon's maxim, "The enemy knows the system." The
      security of the system must rely on the secrecy of the seed
      only. It must not depend on the secrecy of the algorithm.
      Further, as explained in point 2 above, an adversory can
      randomly generate 12 digit number with a high likelihood of it
      being an actual UID to a resident.
    </p>
  </li>
  <li>
    <p>
      <strong>The Checksum</strong> (page 12):
    </p>
    <blockquote>
      There is one scheme that meets our requirements: the Verhoeff
      Scheme. This scheme is relatively complex, and in the days
      before ubiquitous computing, there was a tendency to avoid it in
      favor of simpler schemes. In this day and age however, and at
      the scale of the UID, precision must be the goal. The Verhoeff
      scheme catches all single errors and all adjacent
      transpositions. It also catches >95% of twin errors and >94% of
      jump transpositions.
    </blockquote>
    <p>
      For those who are curious about what this scheme is, more information can be found at
      <a href="http://www.cs.utsa.edu/~wagner/laws/verhoeff.html">http://www.cs.utsa.edu/~wagner/laws/verhoeff.html</a>
      and <a href="http://en.wikipedia.org/wiki/Verhoeff_algorithm">http://en.wikipedia.org/wiki/Verhoeff_algorithm</a>.
    </p>
  </li>
</ol>
<p>
  <strong>Update on 31 May 2010:</strong> After an email conversation
  with Nandan Nilekani about the points I have documented in this blog
  post, he requested that I send these points in the form a document
  to him so that he can have it reviewed by his team. I have done so
  today.
</p>

<p><a href="https://susam.in/maze/uid-numbering-scheme.html">Read on website</a></p>
]]>
</description>
<pubDate>Mon, 24 May 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Coefficient of Variation Function in PostgreSQL</title>
<link>https://susam.in/maze/coefficient-of-variation-function-in-postgresql.html</link>
<guid>https://susam.in/maze/coefficient-of-variation-function-in-postgresql.html</guid>
<description>
<![CDATA[
<p>
  Today I learnt how to create an aggregate function in PostgreSQL
  function that wraps the functionality provided by other aggregate
  functions in PosgreSQL. In this experiment, I created
  a <code>cv()</code> function that calculates the coefficient of
  variation. The function <code>cv(x)</code> is equivalent
  to <code>stddev(x)</code> / <code>avg(x)</code> where <code>x</code>
  represents the list of data points.
</p>

<h2 id="example-data-table">Example Data Table<a href="#example-data-table"></a></h2>
<pre>
<samp>$ <kbd>cat perf.sql</kbd>
CREATE TABLE performance
(
    name VARCHAR,
    duration DOUBLE PRECISION
);

INSERT INTO performance VALUES ('RAND', 101.0);
INSERT INTO performance VALUES ('ZERO', 157.0);
INSERT INTO performance VALUES ('NONE', 209.0);
INSERT INTO performance VALUES ('TEST', 176.0);
INSERT INTO performance VALUES ('UNIT', 197.0);
INSERT INTO performance VALUES ('LOAD', 193.0);
INSERT INTO performance VALUES ('FREE', 198.0);
$ <kbd>psql statistics</kbd>
psql (8.4.3)
Type "help" for help.
statistics=# <kbd>\i perf.sql</kbd>
DROP TABLE
CREATE TABLE
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
statistics=# <kbd>select * from performance;</kbd>
 name | duration
------+----------
 RAND |      101
 ZERO |      157
 NONE |      209
 TEST |      176
 UNIT |      197
 LOAD |      193
 FREE |      198
(7 rows)

statistics=#</samp>
</pre>
<h2 id="useful-details-to-create-our-function">Useful Details to Create Our Function<a href="#useful-details-to-create-our-function"></a></h2>
<pre>
<samp>statistics=# <kbd>SELECT aggtransfn, aggfinalfn, aggtranstype::regtype, agginitval</kbd>
statistics-# <kbd>FROM pg_aggregate</kbd>
statistics-# <kbd>WHERE aggfnoid='stddev(double precision)'::regprocedure;</kbd>
  aggtransfn  |     aggfinalfn     |    aggtranstype    | agginitval
--------------+--------------------+--------------------+------------
 float8_accum | float8_stddev_samp | double precision[] | {0,0,0}
(1 row)

statistics=# <kbd>SELECT aggtransfn, aggfinalfn, aggtranstype::regtype, agginitval</kbd>
statistics-# <kbd>FROM pg_aggregate</kbd>
statistics-# <kbd>WHERE aggfnoid='avg(double precision)'::regprocedure;</kbd>
  aggtransfn  | aggfinalfn |    aggtranstype    | agginitval
--------------+------------+--------------------+------------
 float8_accum | float8_avg | double precision[] | {0,0,0}
(1 row)

statistics=#</samp>
</pre>

<h2 id="function-definition">Function Definition<a href="#function-definition"></a></h2>
<pre>
<samp>$ <kbd>cat cv.sql</kbd>
CREATE OR REPLACE FUNCTION finalcv(double precision[])
RETURNS double precision
AS $$
    SELECT float8_stddev_samp($1) / float8_avg($1);
$$ LANGUAGE SQL;

CREATE AGGREGATE cv(double precision)
(
    sfunc = float8_accum,
    stype = double precision[],
    finalfunc = finalcv,
    initcond = '{0, 0, 0}'
);</samp>
</pre>

<h2 id="usage">Usage<a href="#usage"></a></h2>
<pre>
<samp>$ <kbd>psql statistics</kbd>
psql (8.4.3)
Type "help" for help.

statistics=# <kbd>select stddev(duration), avg(duration) from performance;</kbd>
      stddev      |       avg
------------------+------------------
 37.1682147873178 | 175.857142857143
(1 row)

statistics=# <kbd>select stddev(duration) / avg(duration) as cv from performance;</kbd>
        cv
-------------------
 0.211354592616754
(1 row)

statistics=# <kbd>\i cv.sql</kbd>
CREATE FUNCTION
CREATE AGGREGATE
statistics=# <kbd>select cv(duration) from performance;</kbd>
        cv
-------------------
 0.211354592616754
(1 row)

statistics=#</samp>
</pre>

<h2 id="bessel-correction">Bessel's Correction<a href="#bessel-correction"></a></h2>
<p>
  Checked whether
  <a href="http://en.wikipedia.org/wiki/Bessel's_correction">Bessel's
    correction</a> was used in the <code>stddev()</code> function of
  PostgreSQL. Yes, it was used.
</p>
<pre>
<samp>$ <kbd>octave -q</kbd>
octave:1&gt; <kbd>std([101, 157, 209, 176, 197, 193, 198], 0)</kbd>
ans =  37.168
octave:2&gt; <kbd>std([101, 157, 209, 176, 197, 193, 198], 1)</kbd>
ans =  34.411
octave:3&gt;</samp>
</pre>
<p>
  The <code>std()</code> function in MATLAB and GNU Octave applies
  Bessel's correction when invoked with the second argument
  as <code>0</code>.
</p>

<p><a href="https://susam.in/maze/coefficient-of-variation-function-in-postgresql.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 13 May 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Zero Length Regular Expression</title>
<link>https://susam.in/maze/zero-length-regular-expression.html</link>
<guid>https://susam.in/maze/zero-length-regular-expression.html</guid>
<description>
<![CDATA[
<p>
  This post presents a list of how zero length regular expression is
  handled in various tools and programming languages. All of them
  compile the zero length regular expression pattern and the regular
  expression matches all strings.
</p>

<h2 id="gnu-grep">GNU grep<a href="#gnu-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>

<h2 id="bsd-grep">BSD grep<a href="#bsd-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>

<h2 id="perl">Perl<a href="#perl"></a></h2>
<pre>
<samp>$ <kbd>perl -e 'print(("foo" =~ //) .  "\n")'</kbd>
1</samp>
</pre>

<h2 id="python">Python<a href="#python"></a></h2>
<pre>
<samp>$ <kbd>python</kbd>
Python 2.5.2 (r252:60911, Jan  4 2009, 21:59:32)
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <kbd>import re; re.compile('').search('foo')</kbd>
&lt;_sre.SRE_Match object at 0x7fc6c5a2c510&gt;
</pre>

<h2 id="java">Java<a href="#java"></a></h2>
<pre>
<samp>$ <kbd>cat RegexExperiment.java</kbd>
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class RegexExperiment
{
    public static void main(String[] args)
    {
        System.out.println(Pattern.compile("").matcher("foo").find());
    }
}
$ <kbd>javac RegexExperiment.java && java RegexExperiment</kbd>
true</samp>
</pre>

<h2 id="mzscheme">MzScheme<a href="#mzscheme"></a></h2>
<pre>
<samp>$ <kbd>mzscheme</kbd>
Welcome to MzScheme v4.0.1 [3m], Copyright (c) 2004-2008 PLT Scheme Inc.
> <kbd>(regexp-match "" "foo")</kbd>
("")</samp>
</pre>

<h2 id="clisp">CLISP<a href="#clisp"></a></h2>
<pre>
<samp>$ <kbd>clisp</kbd>
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.44.1 (2008-02-23) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

[1]> <kbd>(regexp:match "" "foo")</kbd>
#S(REGEXP:MATCH :START 0 :END 0)</samp>
</pre>

<h2 id="c">C<a href="#c"></a></h2>
<pre>
<samp>$ <kbd>ls -l /usr/lib/libpcre.so*</kbd>
lrwxrwxrwx 1 root root     17 May  3 15:15 /usr/lib/libpcre.so -> libpcre.so.3.12.1
lrwxrwxrwx 1 root root     17 Jan  6 14:57 /usr/lib/libpcre.so.3 -> libpcre.so.3.12.1
-rw-r--r-- 1 root root 162816 Jul 14  2008 /usr/lib/libpcre.so.3.12.1
susam@swift:~$ <kbd>cat pcre.c</kbd>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

int main(int argc, char **argv)
{
    pcre *p;
    char *re = "";
    char *s  = "foo";
    const char *errmsg;
    int errpos;
    int ovector[10];
    int ret;

    p = pcre_compile(re, 0, &amp;errmsg, &amp;errpos, NULL);
    ret = pcre_exec(p, NULL, s, strlen(s), 0, 0,
                    ovector, sizeof ovector / sizeof *ovector);

    printf(ret &lt; 0 ? "no match\n" : "match\n");
}
$ <kbd>cc -lpcre pcre.c && ./a.out</kbd>
match</samp>
</pre>

<p><a href="https://susam.in/maze/zero-length-regular-expression.html">Read on website</a></p>
]]>
</description>
<pubDate>Mon, 03 May 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Minimal Installation of WinHTTP API</title>
<link>https://susam.in/maze/minimal-installation-of-winhttp-api.html</link>
<guid>https://susam.in/maze/minimal-installation-of-winhttp-api.html</guid>
<description>
<![CDATA[
<p>
  Here are the steps to perform for a minimal download and
  installation of WinHTTP API for C++ so that we have the
  the <code>winhttp.lib</code> and <code>winhttp.h</code> files while
  writing C++ programs using the WinHTTP API:
</p>
<ol>
  <li>Download PSDK-x86.exe
  from <a href="https://web.archive.org/web/20100507044252/http://www.microsoft.com/downloads/details.aspx?familyid=0BAF2B35-C656-4969-ACE8-E4C0C0716ADB&displaylang=en">Microsoft
      ® Windows Server® 2003 R2 Platform SDK Web Install</a>.
  </li>
  <li>
    Run the installer, select <em>Custom</em> installation type, clear
    all categories and select <em>Microsoft Windows Core SDK</em> &gt;
    <em>Build Environment</em> &gt; <em>Build Environment (x86
    32-bit)</em>.
  </li>
</ol>
<p>
  After the installation is complete, the <code>winhttp.h</code> file
  can be found at <code>C:\Program Files\Microsoft Platform SDK Server
    2003 R2\Include</code>.
</p>

<p><a href="https://susam.in/maze/minimal-installation-of-winhttp-api.html">Read on website</a></p>
]]>
</description>
<pubDate>Wed, 14 Apr 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Immediate SourceForge Tracker Notification</title>
<link>https://susam.in/maze/immediate-sourceforge-tracker-notification.html</link>
<guid>https://susam.in/maze/immediate-sourceforge-tracker-notification.html</guid>
<description>
<![CDATA[
<p>
  Here are the steps I followed to prevent the tracker email notification
  sent to a SourceForge mailing list address from being held for
  moderation.
</p>
<ol>
  <li>
    Navigate to <em>Mailman admin</em> &gt; <em>Privacy options</em>
    &gt; <em>Sender filters</em>. Then
    add <code>noreply@sourceforge.net</code> to the list of non-member
    addresses whose postings should be automatically accepted.
  </li>
  <li>
    Navigate to <em>Mailman admin</em> &gt; <em>Privacy options</em>
    &gt; <em>Recepient filters</em>. Then
    add <code>noreply@sourceforge.net</code> to alias names (regexps)
    which qualify as explicit to or cc destination names for this
    list.
  </li>
</ol>
<p>
  The first step was necessary because all emails sent by tracker
  has <code>noreply@sourceforge.net</code> as the <em>From</em> address.
</p>
<p>
  The second step was necessary because all emails sent by tracker
  has <code>noreply@sourceforge.net</code> as the <em>To</em> address.
</p>

<p><a href="https://susam.in/maze/immediate-sourceforge-tracker-notification.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Lucene Java Example</title>
<link>https://susam.in/maze/lucene-java-example.html</link>
<guid>https://susam.in/maze/lucene-java-example.html</guid>
<description>
<![CDATA[
<p>
  Here is a simple program I wrote that makes use of Lucene Java
  3.0.1:
</p>

<pre>
<code>package in.susam;

import java.io.File;
import java.io.IOException;

import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.util.Version;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;

public class LuceneDemo
{
    static final String INDEX_DIR = "index1";
 
    public static void main(String[] args) throws Exception {
        write();
        search("content", "integer");
        search("tags", "rhyme");
    }
    
    static void write() throws IOException {
        // Create index
        IndexWriter writer = new IndexWriter(
                FSDirectory.open(new File(INDEX_DIR)),
                new StandardAnalyzer(Version.LUCENE_30),
                true,
                IndexWriter.MaxFieldLength.UNLIMITED);
 
        Document doc;
        String field;
        String text;
 
        // Add first document
        doc = new Document();

        field = "title";
        text = "Humpty Dumpty sat on a wall";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "Humpty Dumpty sat on a wall.\n" +
               "Humpty Dumpty had a great fall;\n" +
               "All the King's horses and all the King's men,\n" +
               "Couldn't put Humpty together again.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "tags";
        text = "rhyme";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        writer.addDocument(doc);

        // Add second document
        doc = new Document();

        field = "title";
        text = "Jack and Jill went up the hill";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "content";
        text = "Jack and Jill went up the hill\n" +
               "To fetch a pail of water.\n" +
               "Jack fell down and broke his crown,\n" +
               "And Jill came tumbling after.\n"; 
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "rhyme";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        writer.addDocument(doc);
        
        // Add third document
        doc = new Document();
        
        field = "title";
        text = "Fermat's Last Theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "In number theory, Fermat's Last Theorem states that no " +
               "three positive integers a, b, and c can satisfy the " +
               "equation for a^n + b^n = c^n for any integer value of n " +
               "greater than two.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "tags";
        text = "math, theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        writer.addDocument(doc);
        
        // Add fourth document
        doc = new Document();
      
        field = "title";
        text = "Euler's theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "content";
        text = "Euler's theorem states that if n is a positive integer and " +
               "a is a positive integer coprime to n, then a^phi(n) = 1 " +
               "(mod n) where phi(n) is Euler's totient function.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "tags";
        text = "math, theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        writer.close();
    }
    
    static void search(String field, String query) throws IOException,
                                                          ParseException {
        IndexSearcher searcher = new IndexSearcher(
                FSDirectory.open(new File(INDEX_DIR)), true);
        QueryParser parser = new QueryParser(
                Version.LUCENE_30, field,
                new StandardAnalyzer(Version.LUCENE_30));
        TopDocs docs = searcher.search(parser.parse(query), 10);
        System.out.println("Query: '" + query + "' in '" + field + "'");
        System.out.println("Total hits: " + docs.totalHits);
        System.out.println("");
        for (int i = 0; i < docs.scoreDocs.length; i++) {
            ScoreDoc hit = docs.scoreDocs[i];
            Document doc = searcher.doc(hit.doc);
            System.out.println("#" + i);
            System.out.println("title: " + doc.get("title"));
            System.out.println("content: " + doc.get("content"));
            System.out.println("tags: " + doc.get("tags"));
            System.out.println("id: " + hit.doc);
            System.out.println("score: " + hit.score);
            System.out.println();
        }
    }
}</code>
</pre>
<p>
  Here is the output when the above code is compiled and run:
</p>
<pre>
<samp>Query: 'integer' in 'content'
Total hits: 2

#0
title: Euler's theorem
content: Euler's theorem states that if n is a positive integer and a is a positive integer coprime to n, then a^phi(n) = 1 (mod n) where phi(n) is Euler's totient function.
tags: math, theorem
id: 3
score: 0.34144828

#1
title: Fermat's Last Theorem
content: In number theory, Fermat's Last Theorem states that no three positive integers a, b, and c can satisfy the equation for a^n + b^n = c^n for any integer value of n greater than two.
tags: math, theorem
id: 2
score: 0.24144039

Query: 'rhyme' in 'tags'
Total hits: 2

#0
title: Humpty Dumpty sat on a wall
content: Humpty Dumpty sat on a wall.
Humpty Dumpty had a great fall;
All the King's horses and all the King's men,
Couldn't put Humpty together again.
tags: rhyme
id: 0
score: 1.287682

#1
title: Jack and Jill went up the hill
content: Jack and Jill went up the hill
To fetch a pail of water.
Jack fell down and broke his crown,
And Jill came tumbling after.

tags: rhyme
id: 1
score: 1.287682
</samp></pre>

<p><a href="https://susam.in/maze/lucene-java-example.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 10 Apr 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>ResizableDoubleArray contract() and expand()</title>
<link>https://susam.in/maze/resizabledoublearray-contract-and-expand.html</link>
<guid>https://susam.in/maze/resizabledoublearray-contract-and-expand.html</guid>
<description>
<![CDATA[
<p>
  Here is a diff of the changes I made to Apache Common Math's
  <code>ResizableDoubleArray</code> class to investigate how it
  contracts or expands its internal capacity.
</p>
<pre>
<code>Index: src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java
===================================================================
--- src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java (revision 925455)
+++ src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java (working copy)
@@ -157,6 +157,14 @@
     public ResizableDoubleArray(int initialCapacity) {
         setInitialCapacity(initialCapacity);
         internalArray = new double[this.initialCapacity];
+        System.out.println(":::: initialCapacity: " + initialCapacity);
+        System.out.println(":::: expansionMode: " +
+                           (expansionMode == 0 ? "MULTIPLICATIVE_MODE"
+                                               : "ADDITIVE_MODE" ));
+        System.out.println(":::: expansionFactor: " + expansionFactor);
+        System.out.println(":::: contractionCriteria: " +
+                           contractionCriteria);
+        System.out.println();
     }
 
     /**
@@ -264,14 +272,33 @@
      * @param value to be added to end of array
      */
     public synchronized void addElement(double value) {
+        System.out.println(":::: addElement(" + value + ")");
+        System.out.println(":::: startIndex: " + startIndex);
+        System.out.println(":::: internalArray.length: " +
+                           internalArray.length);
         numElements++;
+        System.out.println(":::: numElements incremented to: " +
+                           numElements);
+
         if ((startIndex + numElements) > internalArray.length) {
+            System.out.println(":::: expanding ...");
             expand();
+            System.out.println(":::: expanded; internalArray.length: " +
+                               internalArray.length);
         }
         internalArray[startIndex + (numElements - 1)] = value;
+        System.out.print(":::: internalArray: ");
+        for (int i = 0; i < startIndex + numElements; i++) {
+            System.out.print(internalArray[i] + ", ");
+        }
+        System.out.println();
         if (shouldContract()) {
+            System.out.println(":::: contracting ...");
             contract();
+            System.out.println(":::: contracted; internalArray.length: " +
+                               internalArray.length);
         }
+        System.out.println();
     }
 
     /**</code>
</pre>
<p>
  Here is a tiny test program to use <code>ResizableDoubleArray</code>.
</p>
<pre>
<code>import org.apache.commons.math.util.ResizableDoubleArray;

public class RDAContractExpand
{
    public static void main(String[] args)
    {
        ResizableDoubleArray rda = new ResizableDoubleArray(10);
        for (int i = 0; i < 10; i++)
            rda.addElement(i);
    }
}</code>
</pre>
<p>
  Here is the output of the above program:
</p>
<pre>
<samp>:::: initialCapacity: 10
:::: expansionMode: MULTIPLICATIVE_MODE
:::: expansionFactor: 2.0
:::: contractionCriteria: 2.5

:::: addElement(0.0)
:::: startIndex: 0
:::: internalArray.length: 10
:::: numElements incremented to: 1
:::: internalArray: 0.0,
:::: contracting ...
:::: contracted; internalArray.length: 2

:::: addElement(1.0)
:::: startIndex: 0
:::: internalArray.length: 2
:::: numElements incremented to: 2
:::: internalArray: 0.0, 1.0,

:::: addElement(2.0)
:::: startIndex: 0
:::: internalArray.length: 2
:::: numElements incremented to: 3
:::: expanding ...
:::: expanded; internalArray.length: 4
:::: internalArray: 0.0, 1.0, 2.0,

:::: addElement(3.0)
:::: startIndex: 0
:::: internalArray.length: 4
:::: numElements incremented to: 4
:::: internalArray: 0.0, 1.0, 2.0, 3.0,

:::: addElement(4.0)
:::: startIndex: 0
:::: internalArray.length: 4
:::: numElements incremented to: 5
:::: expanding ...
:::: expanded; internalArray.length: 8
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0,

:::: addElement(5.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 6
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0,

:::: addElement(6.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 7
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0,

:::: addElement(7.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 8
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,

:::: addElement(8.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 9
:::: expanding ...
:::: expanded; internalArray.length: 16
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,

:::: addElement(9.0)
:::: startIndex: 0
:::: internalArray.length: 16
:::: numElements incremented to: 10
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,</samp>
</pre>

<p><a href="https://susam.in/maze/resizabledoublearray-contract-and-expand.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 23 Mar 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>OSVDB in GSoC</title>
<link>https://susam.in/maze/osvdb-in-gsoc.html</link>
<guid>https://susam.in/maze/osvdb-in-gsoc.html</guid>
<description>
<![CDATA[
<p>
  The Open Source Vulnerability Database (OSVDB) is participating in
  Google Summer of Code (GSoC) this year. I have been contributing to
  OSVDB as a <em>vulnerability mangler</em> since Aug 2006 and
  analyzing new vulnerabilities being published by security
  researchers, adding more details to them depending on the nature and
  severity of the vulnerabilities, and cataloging them. Our internal
  systems for cataloging vulnerabilities could use some help from more
  contributors, so it is great that OSVDB is participating in GSoC
  this year.
</p>
<p>
  Last month we selected some potential contributors from a pile of
  applications. One of them is Timothy F. Tutt Jr. who will be doing
  the Researcher Confidence Project for OSVDB.
</p>
<p>
  In the commenting system for OSVDB contributors, Brian Martin a.k.a.
  Jericho, one of the project leaders, wrote this comment that I found
  quite funny:
</p>
<blockquote>
  Don't think I need to argue how big this is to me, given the time I
  spend arguing with researchers and vendors. If we approve this and I
  am not the mentor, I will feed Jake to a woodchipper.
</blockquote>

<p><a href="https://susam.in/maze/osvdb-in-gsoc.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 27 Apr 2007 00:00:00 +0000</pubDate>
</item>
<item>
<title>Volunteering for OSVDB</title>
<link>https://susam.in/maze/volunteering-for-osvdb.html</link>
<guid>https://susam.in/maze/volunteering-for-osvdb.html</guid>
<description>
<![CDATA[
<p>
  I am now an active Open Source Vulnerability Database (OSVDB)
  volunteer. I joined it on 06 Jun 2006. Although I enrolled as a
  volunteer there around 3 weeks, I worked on a vulnerability for the
  first time today. The vulnerability I picked for my first
  contribution
  was <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2006-2971">0verkill
  recv_packet() Function UDP Handling Overflow DoS</a>. This is an
  integer underflow error in a Linux based gaming daemon called
  0verkill. It could be exploited to launch DoS attacks by sending UDP
  packets of size less than 12 bytes to the 0verkill daemon. An
  example exploit code is available
  at <a href="http://web.archive.org/web/20201208191904/https://www.securityfocus.com/archive/1/436659/100/0/threaded">this
  Bugtraq thread</a>.
</p>
<p>
  OSVDB is a project of the Open Security Foundation. Its goal is to
  provide accurate, unbiased information about security
  vulnerabilities in computerized equipment. The core of OSVDB is a
  relational database which ties various information about security
  vulnerabilities into a common, cross-referenced data source.
</p>
<p>
  In OSVDB, vulnerability reports, advisories, and exploits posted in
  various security lists enter the database as new entries. Each new
  entry contains only a title and links to entries of the same
  vulnerability in other security lists. However, a new entry does not
  contain any detailed description of the vulnerability. After the new
  entries are thoroughly scrutinized, analyzed, and refined by us, we
  add vulnerability description, technical description, solution
  description, manual testing notes, etc. Then these details on each
  entry are reviewed by other members of OSVDB, further refined if
  necessary, and then marked as stable entries. Once an entry for a
  vulnerability becomes stable, the detailed information for it
  appears on the page for the entry. One of the wonderful things that
  OSVDB brings to the world of security research is that each entry
  published on the OSVDB website has an extensive and almost
  exhaustive list of cross-references linking together all information
  about the vulnerability available on various security databases.
</p>

<p><a href="https://susam.in/maze/volunteering-for-osvdb.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 24 Jun 2006 00:00:00 +0000</pubDate>
</item>
<item>
<title>Fork Bunny</title>
<link>https://susam.in/maze/fork-bunny.html</link>
<guid>https://susam.in/maze/fork-bunny.html</guid>
<description>
<![CDATA[
<p>
  Have a close look at this line of shell command that can be executed
  on Bash, Zsh, and most POSIX or POSIX-like shells:
</p>
<pre><code>: () { : | : & } ; :</code></pre>
<p>
  Beware! Don't execute it on your system without understanding the
  consequences completely. If the command above looks puzzling, that
  is because it is deliberately obfuscated. Let us simplify it.
</p>
<p>
  The <code>:</code> is a function name. It could very well have
  been <code>f</code>. Let us replace <code>:</code>
  with <code>f</code> and see what the code now looks like.
</p>
<pre><code>f () { f | f & } ; f</code></pre>
<p>
Now it looks familiar. We have two commands separated by a semicolon.
Written in a more legible manner, the code would look like this:
</p>
<pre>
<code>f()
{
    f | f &
}

f</code>
</pre>
<p>
  It creates a function <code>f</code> and then executes it. This
  function calls itself twice recursively. The control
  operator <code>&</code> executes the recursive calls
  to <code>f</code> asynchronously, i.e., in the background. The
  number of instances of the function executing keeps growing
  exponentially thereby depleting CPU cycles and memory. The system is
  rendered unusable soon.
</p>
<p>
  This type of denial-of-service attack by self-replication is also
  known as a <em>fork bunny</em> which is a specific type
  of <em>wabbit</em>. See the following entry in the Jargon File for
  more information on
  this: <a href="http://catb.org/~esr/jargon/html/W/wabbit.html">wabbit</a>.
</p>

<p><a href="https://susam.in/maze/fork-bunny.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 11 Jun 2006 00:00:00 +0000</pubDate>
</item>
<item>
<title>Vim Sudo Write Trick</title>
<link>https://susam.in/maze/vim-sudo-write-trick.html</link>
<guid>https://susam.in/maze/vim-sudo-write-trick.html</guid>
<description>
<![CDATA[
<h2 id="trick">The Trick<a href="#trick"></a></h2>
<p>
  You open a file, edit it, and save it only to get the E45 error
  message that says:
</p>
<pre><samp>E45: 'readonly' option is set (add ! to override)</samp></pre>
<p>
  You now realize that only root can edit the file. What do you? Start
  over? No, instead try this:
</p>
<pre><code>:w !sudo tee "%"</code></pre>
<p>
  I learnt this trick recently from the comment section
  of <a href="https://web.archive.org/web/20051120054527/http://www.vim.org/tips/tip.php?tip_id=975">Tip #975</a>
  on the Vim Tips website.
</p>

<h2 id="explanation">Explanation<a href="#explanation"></a></h2>
<p>
  How does the <code>:w !sudo tee "%"</code> trick work? Let us look
  at the command part-by-part:
</p>
<ul>
  <li>
    <p><code>:w !{cmd}</code></p>
    <p>
      Execute <code>{cmd}</code> with all lines in buffer as standard
      input.
    </p>
  </li>
  <li>
    <p><code>"%"</code></p>
    <p>
      The <code>%</code> is replaced with the current filename. The
      quotes around it keeps the filename as a single argument even if
      it contains whitespace.
    </p>
  </li>
  <li>
    <p><code>tee {file}</code></p>
    <p>
      The <code>tee</code> command is a Unix command (not a Vim
      command). It copies standard input to standard output
      and <code>{file}</code>.
    </p>
  </li>
</ul>

<h2 id="more">More Information<a href="#more"></a></h2>
<p>
  For more information on this command, enter the following commands
  in Vim:
</p>
<pre>
<code>:help :w_c
:help current-file
:help :_%</code>
</pre>
<p>
  Also, enter the following command in shell:
</p>
<pre><code>man tee</code></pre>
<p>
  I hope this was fun!
</p>

<p><a href="https://susam.in/maze/vim-sudo-write-trick.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 25 Aug 2005 00:00:00 +0000</pubDate>
</item>
<item>
<title>cal 9 1752</title>
<link>https://susam.in/maze/cal-9-1752.html</link>
<guid>https://susam.in/maze/cal-9-1752.html</guid>
<description>
<![CDATA[
<p>
  A very interesting thing I came across recently while learning Unix
  is an apparent gap in the calendar for Sep 1752. Here is how
  the <code>cal</code> output for this month appears on a Unix or
  Linux system:
</p>
<pre>
<samp>$ <kbd>cal 9 1752</kbd>
   September 1752
Su Mo Tu We Th Fr Sa
       1  2 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30</samp>
</pre>
<p>
  In the SunOS 5.9 manual page
  for <a href="https://docs.oracle.com/cd/E19683-01/817-3936/6mjgdbv29/index.html">cal(1)</a>,
  this gap is explained as follows:
</p>
<!-- SunOS 5.9 was released on 28 May 2002 -->
<blockquote>
  An unusual calendar is printed for September 1752. That is the month
  11 days were skipped to make up for lack of leap year adjustments.
  To see this calendar, type: <code>cal 9 1752</code>
</blockquote>
<p>
  Similarly, FreeBSD 5.0 has the following note in its manual page
  for <a href="https://www.freebsd.org/cgi/man.cgi?query=cal&sektion=1&manpath=FreeBSD+5.0-RELEASE">cal(1)</a>:
</p>
<!-- FreeBSD 5.0-RELEASE was released in Jan 2003 -->
<blockquote>
  <p>
    -s <em>country_code</em>
  </p>
  <p style="margin-left: 2em">
    Assume the switch from Julian to Gregorian Calendar at the date
    associated with the <em>country_code</em>. If not
    specified, <strong>ncal</strong> tries to guess the switch date
    from the local environment or falls back to September 2, 1752.
    This was when Great Britain and her colonies switched to the
    Gregorian Calendar.
  </p>
</blockquote>
<p>
  On investigating this switch from Julian to Gregorian calendar, I
  learnt that the Julian calendar was introduced by Julius Caesar in
  46 BC and it remained in effect across most of the Western world
  from 45 BC to 1582. It assumed an average year to be 365.25 days
  long. However, the actual solar year has been known to be around
  365.2422 days since the 17th century. Although the difference
  appears to be too small, it leads to an error of adding 1 extra day
  every 128 years. To reduce this error, the Gregorian calendar was
  introduced in October 1582 by Pope Gregory XIII. It assumed an
  average year to be 365.2425 days long.
</p>
<p>
  The new calendar was adopted in some European countries where 4 Oct
  1582 was followed by 15 Oct 1582 thereby skipping 10 days in
  between. However, it took as long as September 1752 for the new
  calendar to be adopted by Britain. In Great Britain and the British
  Empire, 2 Sep 1752 was followed by 14 Sep 1752 and that is the gap
  of 11 days we see in the <code>cal 9 1752</code> output.
</p>

<p><a href="https://susam.in/maze/cal-9-1752.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 14 Sep 2004 00:00:00 +0000</pubDate>
</item>
<item>
<title>Decode Stumped</title>
<link>https://susam.in/maze/decode-stumped.html</link>
<guid>https://susam.in/maze/decode-stumped.html</guid>
<description>
<![CDATA[
<p>
  A few weeks ago, someone posted a C programming puzzle to
  the <a href="mailto:ncoders@yahoogroups.com">ncoders</a> mailing
  list. This is a mailing list I formed a few months ago to host
  discussions on computers, programming, and network protocols among
  university students. The programming puzzle that was posted asked if
  we could write a C program such that the <code>main()</code>
  function <em>does not seem to appear</em> in the code. Here is a
  solution I could come up with that involves obfuscating the
  identifer <code>main</code> using preprocessor macros and
  the <code>##</code> preprocessing operator for token concatenation.
</p>
<pre>
<code>#include &lt;stdio.h&gt;

#define decode(s,t,u,m,p,e,d) m ## s ## u ## t
#define begin decode(a,n,i,m,a,t,e)

int begin()
{
    printf("Stumped?\n");
}</code>
</pre>
<p>
This program compiles and runs successfully. Here is the output:
</p>
<pre><samp>Stumped?</samp></pre>
<p>
  Let me explain how this code works. When the C preprocessor runs on
  this code, the following preprocessing steps occur:
</p>
<ul>
  <li>
    <code>begin</code> is replaced with <code>decode(a,n,i,m,a,t,e)</code>,
  </li>
  <li>
    <code>decode(a,n,i,m,a,t,e)</code> is replaced with <code>m ## a
    ## i ## n</code>, and
  </li>
  <li>
    <code>m ## a ## i ## n</code> is replaced with <code>main</code>.
  </li>
</ul>
<p>
  Thus <code>begin()</code> is replaced with <code>main()</code>.
</p>
<p>
  <strong>Update on 31 Jul 2007:</strong> Although the mailing list
  referred to in this post no longer exists, this tiny piece of code
  seems to have survived on the web. A
  <a href="https://www.google.com/search?q=decode(s%2Ct%2Cu%2Cm%2Cp%2Ce%2Cd)">quick
  search</a> shows so many occurrences of this code on the web. It is
  quite surprising to me that a rather silly piece of code written
  during a Sunday afternoon to solve an equally silly puzzle has been
  the subject of much discussion!
</p>

<p><a href="https://susam.in/maze/decode-stumped.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 02 Nov 2003 00:00:00 +0000</pubDate>
</item>
<item>
<title>C Quine</title>
<link>https://susam.in/maze/c-quine.html</link>
<guid>https://susam.in/maze/c-quine.html</guid>
<description>
<![CDATA[
<p>
  I have been running a mailing list
  named <a href="mailto:ncoders@yahoogroups.com">ncoders</a> for the
  last several months now. This mailing list is meant for university
  students interested in computers, programming, and network
  protocols.
</p>
<p>
  A few weeks ago, Vikram Agrawal, a very knowledgeable member of this
  mailing list introduced us to an interesting type of computer
  program called <em>quine</em>. A quine is a computer program that
  produces an exact copy of its own source code as its output. It must
  not consume any input, so tricks involving reading its own source
  code and printing it are not permitted.
</p>

<h2 id="classic-quine">The Classic Quine<a href="#classic-quine"></a></h2>
<p>
  Here is a classic quine Vikram shared with us while explaining the
  concept of quine:
</p>
<pre>
<code>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</code>
</pre>
<p>
  This program is written in K&amp;R C. The current version of GCC
  compiles it fine. It is a valid quine on ASCII machines because this
  program uses the integer code <code>34</code> to print the quotation
  mark (<code>"</code>) character. This will be explained further in
  the next section. On another implementation of the C compiler which
  does not use ASCII code for the quotation mark character, the
  program needs to be modified to the use the correct code.
</p>
<p>
  Here are some commands that demonstrate the quine:
</p>
<pre>
$ <kbd>echo -n 'main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}' > quine.c</kbd>
$ <kbd>cc quine.c</kbd>
$ <kbd>./a.out > out.txt</kbd>
$ <kbd>diff quine.c out.txt</kbd>
$ <kbd>./a.out</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}
</pre>
<p>
  The source code of this quine does not end with a newline.
  The <code>-n</code> option of GNU echo ensures that the source code
  file is created without a terminating newline.
</p>

<h2 id="close-look-at-classic-quine">Close Look at the Classic Quine<a href="#close-look-at-classic-quine"></a></h2>
<p>
  Let us take a close look at how the quine introduced in the previous
  section works. Let us add some newlines in the source code of this
  quine for the sake of clarity.
</p>
<pre>
<code>main()
{
    char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";
    printf(s,34,s,34);
}</code>
</pre>
<p>
  This is almost the same program presented in the previous section.
  Only a few newlines have been added to it to make the program easier
  to read.
</p>
<p>
  We can see that the <code>printf</code> call uses the
  string <code>s</code> as the format string. The format string
  contains three conversion
  specifications: <code>%c</code>, <code>%s</code>,
  and <code>%c</code>. The arguments for these conversions
  are: <code>34</code>, the string <code>s</code> itself,
  and <code>34</code> once again. Note that <code>34</code> is the
  ASCII code for the quotation mark character (<code>"</code>). With
  that in mind, let us now construct the output of
  the <code>printf</code> call in a step-by-step manner.
</p>
<p>
  The initial portion of the output consists of the format string from
  the beginning up to, but not including, the first conversion
  specification copied unchanged to the output stream. Here it is:
</p>
<pre><samp>main(){char*s=</samp></pre>
<p>
  Then the first conversion specification <code>%c</code> is
  processed, the corresponnding argument <code>34</code> is taken, and
  a quotation mark is printed like this:
</p>
<pre><samp>"</samp></pre>
<p>
  Then the second conversion specification <code>%s</code> is
  processed. The corresponding argument is the string <code>s</code>
  itself, so the entire string is printed like this:
</p>
<pre><samp>main(){char*s=%c%s%c;printf(s,34,s,34);}</samp></pre>
<p>
  Then the third conversion specification <code>%c</code> is
  processed. The corresponding argument is <code>34</code> again, so
  once again a quotation mark is printed like this:
</p>
<pre><samp>"</samp></pre>
<p>
  Finally, the rest of the format string is copied unchanged to
  produce the following output:
</p>
<pre><samp>;printf(s,34,s,34);}</samp></pre>
<p>
  Here are all the five parts of the output presented next to each other:
</p>
<pre><samp>main(){char*s=</samp></pre>
<pre><samp>"</samp></pre>
<pre><samp>main(){char*s=%c%s%c;printf(s,34,s,34);}</samp></pre>
<pre><samp>"</samp></pre>
<pre><samp>;printf(s,34,s,34);}</samp></pre>
<p>
  Writing them all out in a single line, we get this:
</p>
<pre>
<samp>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</samp>
</pre>
<p>
  This output matches the source code of the program thus confirming
  that our program is a quine.
</p>

<h2 id="classic-quine-with-terminating-newline">Classic Quine With Terminating Newline<a href="#classic-quine-with-terminating-newline"></a></h2>
<p>
  The source code of the classic quine presented above does not
  terminate with a newline. I found that a little bothersome because I
  am used to always terminating my source code with a single trailing
  newline at the end. So I decided to modify that quine a little to
  ensure that it always ends with a newline. This is the quine I arrived at:
</p>
<pre>
<samp>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}</samp>
</pre>
<p>
  Compared to the quine in the previous sections, this one has an
  additional <code>%c</code> at the end of the formal string and the
  integer <code>10</code> as the corresponding argument to ensure that
  the output ends with a newline. Here is a demonstration of this
  quine:
</p>
<pre>
$ <kbd>echo 'main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}' > quine.c</kbd>
$ <kbd>cc quine.c</kbd>
$ <kbd>./a.out > out.txt</kbd>
$ <kbd>diff quine.c out.txt</kbd>
$ <kbd>./a.out</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}
</pre>

<p><a href="https://susam.in/maze/c-quine.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 19 Oct 2003 00:00:00 +0000</pubDate>
</item>
<item>
<title>%2E Trick</title>
<link>https://susam.in/maze/2e-trick.html</link>
<guid>https://susam.in/maze/2e-trick.html</guid>
<description>
<![CDATA[
<p>
  There are two interesting vulnerabilities in Microsoft IIS 3.0 that
  allow remote attackers to view the source code of dynamic web pages
  written using ASP. Both are related and both are due to improper
  input validation by IIS 3.0.
</p>

<h2 id="appending-dot">Appending Dot<a href="#appending-dot"></a></h2>
<p>
  The first vulnerability allows the client to retrieve the source
  code of an ASP script by simply appending a dot
  (i.e., <code>.</code>) to the end of the URL. For example, while an
  URL like
</p>
<pre><code>http://example.com/foo.asp</code></pre>
<p>
  shows the output
  of <code>foo.asp</code>, the same URL when modified
  to
</p>
<pre><code>http://example.com/foo.asp.</code></pre> shows its source
  code.
  See <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0154">CVE-1999-0154</a>
  and <a href="http://web.archive.org/web/19980220121004/http://ciac.llnl.gov/ciac/bulletins/h-48.shtml">CIAC:H-48</a>
  for more details on this issue.
</p>

<h2 id="replacing-dit-with-2e">Replacing Dot With %2E<a href="#replacing-dit-with-2e"></a></h2>
<p>
  The second vulnerability, discovered by Weld Pond, is an issue that
  was introduced when the first issue was fixed by Microsoft. This
  vulnerability allows a client to retrieve the source code of an ASP
  script by changing the dot in the filename with its URL-encoding,
  i.e., <code>%2e</code>. For example, while an URL like
</p>
<pre><code>http://example.com/foo.asp</code></pre>
<p>
  shows the output
  of <code>foo.asp</code>, the same URL when modified
  to
</p>
<pre><code>http://example.com/foo%2easp.</code></pre> shows its source
  code.
</p>
<p>
  Note that <code>2e</code> is the hexadecimal representation of the
  ASCII code of the dot character. Here is a tiny C program that
  demonstrates this:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    printf("'%c', %d, %#x\n", '.', '.', '.');
    return 0;
}</code>
</pre>
Here is the output:
<pre>
<samp>$ cc foo.c && ./a.out
'.', 46, 0x2e</samp>
</pre>
<p>
  See <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0253">CVE-1999-0253</a>
  and <a href="http://web.archive.org/web/20010309183310/http://www.securityfocus.com/bid/1814">BID:1814</a>
  for more details on this issue.
</p>

<p><a href="https://susam.in/maze/2e-trick.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 09 Dec 2001 00:00:00 +0000</pubDate>
</item>


</channel>
</rss>
