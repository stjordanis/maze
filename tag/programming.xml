<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Programming Maze</title>
<link>https://susam.in/maze/</link>
<atom:link href="https://susam.in/maze/rss.xml"
           rel="self" type="application/rss+xml"/>
<description>Feed from Susam's Programming Maze</description>

<item>
<title>The Epic Lisp Hack</title>
<link>https://susam.in/maze/epic-lisp-hack.html</link>
<guid>https://susam.in/maze/epic-lisp-hack.html</guid>
<description>
<![CDATA[
<p>
  There is a wonderful story about a legendary Lisp debugging story in
  the second chapter of the book <em>Practical Common Lisp</em> by
  Peter Seibel. Quoting the story here:
</p>
<blockquote>
  <p>
    An even more impressive instance of remote debugging occurred on
    NASA's 1998 Deep Space 1 mission. A half year after the space
    craft launched, a bit of Lisp code was going to control the
    spacecraft for two days while conducting a sequence of
    experiments. Unfortunately, a subtle race condition in the code
    had escaped detection during ground testing and was already in
    space. When the bug manifested in the wild--100 million miles away
    from Earth--the team was able to diagnose and fix the running
    code, allowing the experiments to complete. One of the
    programmers described it as follows:
  </p>
  <blockquote>
    <p>
      Debugging a program running on a $100M piece of hardware that is
      100 million miles away is an interesting experience. Having a
      read-eval-print loop running on the spacecraft proved invaluable
      in finding and fixing the problem.
    </p>
  </blockquote>
</blockquote>

<p><a href="https://susam.in/maze/epic-lisp-hack.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>Hacktoberfest Spam</title>
<link>https://susam.in/maze/hacktoberfest-spam.html</link>
<guid>https://susam.in/maze/hacktoberfest-spam.html</guid>
<description>
<![CDATA[
<p>
  I received two pull requests for two of my projects on GitHub today.
  I am the author of one and the maintainer of the other.
</p>
<p>
  At first, the pull requests did not make sense at all. One of them
  made minor changes to a README, e.g., changing "this book" to "the
  book". It did not fix a typo or grammatical error. It merely chose a
  word different from the one I had chosen. In fact, I preferred "this
  book", so the pull request (PR) was inconsistent with my preference.
  There was no explanation whatsoever regarding why this change was
  warranted. Then I looked at the pull request author's profile and
  found that the same person had submitted several such trivial pull
  requests to other projects too, all of them changing "this" to "the"
  at some places in various README files.
</p>
<p>
  It all began to make sense when I looked at the calendar. It was Oct
  01. This looked like pull request spam due to Hacktoberfest. For
  now, I just labelled the pull requests as "invalid" (as suggested by
  the <a href="https://hacktoberfest.digitalocean.com/faq/">Hacktoberfest
  FAQ</a>), closed the pull requests, and moved on.
</p>
<p>
  Like all good things created with good intentions on the Internet,
  spam is hurting this event and bringing bad reputation to it. The
  possibility of large scale, endless spam should be worked into the
  design of any new Internet-based event or solution.
</p>

<p><a href="https://susam.in/maze/hacktoberfest-spam.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Unix Timestamp 1600000000</title>
<link>https://susam.in/maze/unix-timestamp-1600000000.html</link>
<guid>https://susam.in/maze/unix-timestamp-1600000000.html</guid>
<description>
<![CDATA[
<p>
  At 2020-09-13 12:26:40 UTC, the Unix timestamp is going to turn
  1600000000.
</p>

<h2 id="unix-timestamp-conversion">Unix Timestamp Conversion<a href="#unix-timestamp-conversion"></a></h2>
<p>
  The following subsections show a few examples of converting the Unix
  timestamp to a human-readable date.
</p>

<h3 id="python">Python<a href="#python"></a></h3>
<pre>
<samp>$ <kbd>python3 -q</kbd>
>>> <kbd>from datetime import datetime</kbd>
>>> <kbd>datetime.utcfromtimestamp(1_600_000_000)</kbd>
datetime.datetime(2020, 9, 13, 12, 26, 40)</samp>
</pre>

<h3 id="gnu-date">GNU date (Linux)<a href="#gnu-date"></a></h3>
<pre>
<samp>$ <kbd>date -ud @1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>

<h3 id="bsd-date">BSD date (macOS, FreeBSD, OpenBSD, etc.)<a href="#bsd-date"></a></h3>
<pre>
<samp>$ <kbd>date -ur 1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>

<h2 id="other-such-dates">Other Such Dates<a href="#other-such-dates"></a></h2>
<p>
All such dates (in UTC) until the end of the current century:
</p>
<pre>
$ <kbd>python3 -q</kbd>
>>> <kbd>from datetime import datetime</kbd>
>>> <kbd>for t in range(0, 4_200_000_000, 100_000_000):</kbd>
... <kbd>    print(f'{t:13_d} - {datetime.utcfromtimestamp(t)}')
...
            0 - 1970-01-01 00:00:00
  100_000_000 - 1973-03-03 09:46:40
  200_000_000 - 1976-05-03 19:33:20
  300_000_000 - 1979-07-05 05:20:00
  400_000_000 - 1982-09-04 15:06:40
  500_000_000 - 1985-11-05 00:53:20
  600_000_000 - 1989-01-05 10:40:00
  700_000_000 - 1992-03-07 20:26:40
  800_000_000 - 1995-05-09 06:13:20
  900_000_000 - 1998-07-09 16:00:00
1_000_000_000 - 2001-09-09 01:46:40
1_100_000_000 - 2004-11-09 11:33:20
1_200_000_000 - 2008-01-10 21:20:00
1_300_000_000 - 2011-03-13 07:06:40
1_400_000_000 - 2014-05-13 16:53:20
1_500_000_000 - 2017-07-14 02:40:00
1_600_000_000 - 2020-09-13 12:26:40
1_700_000_000 - 2023-11-14 22:13:20
1_800_000_000 - 2027-01-15 08:00:00
1_900_000_000 - 2030-03-17 17:46:40
2_000_000_000 - 2033-05-18 03:33:20
2_100_000_000 - 2036-07-18 13:20:00
2_200_000_000 - 2039-09-18 23:06:40
2_300_000_000 - 2042-11-19 08:53:20
2_400_000_000 - 2046-01-19 18:40:00
2_500_000_000 - 2049-03-22 04:26:40
2_600_000_000 - 2052-05-22 14:13:20
2_700_000_000 - 2055-07-24 00:00:00
2_800_000_000 - 2058-09-23 09:46:40
2_900_000_000 - 2061-11-23 19:33:20
3_000_000_000 - 2065-01-24 05:20:00
3_100_000_000 - 2068-03-26 15:06:40
3_200_000_000 - 2071-05-28 00:53:20
3_300_000_000 - 2074-07-28 10:40:00
3_400_000_000 - 2077-09-27 20:26:40
3_500_000_000 - 2080-11-28 06:13:20
3_600_000_000 - 2084-01-29 16:00:00
3_700_000_000 - 2087-04-01 01:46:40
3_800_000_000 - 2090-06-01 11:33:20
3_900_000_000 - 2093-08-01 21:20:00
4_000_000_000 - 2096-10-02 07:06:40
4_100_000_000 - 2099-12-03 16:53:20</samp>
</pre>

<h2 id="update">Update<a href="#update"></a></h2>
<p>
  Here is a screenshot I took at Unix timestamp 1600000000:
  <a href="https://twitter.com/susam/status/1305120936098627589">twitter.com/susam/status/130512093609862758</a>.
</p>
<p>
Reproduced as text below:
</p>
<pre>
<samp>$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:39 UTC 2020
Sun Sep 13 17:56:39 IST 2020
1599999999
$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:40 UTC 2020
Sun Sep 13 17:56:40 IST 2020
1600000000</samp>
</pre>
<p>
An important point worth noting from the POSIX.1-2008 specification:
</p>
<blockquote>
Coordinated Universal Time (UTC) includes leap seconds. However, in
POSIX time (seconds since the Epoch), leap seconds are ignored (not
applied) to provide an easy and compatible method of computing time
differences. Broken-down POSIX time is therefore not necessarily UTC,
despite its appearance.
</blockquote>
<p>
See <a href="https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16">&sect;
A.4.16</a> of the POSIX.1-2008 specification for more details.
</p>

<p><a href="https://susam.in/maze/unix-timestamp-1600000000.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Pointers in K&amp;R</title>
<link>https://susam.in/maze/pointers-in-knr.html</link>
<guid>https://susam.in/maze/pointers-in-knr.html</guid>
<description>
<![CDATA[
<p>
  I learnt C from the book <em>The C Programming Language, 2nd
  ed.</em> (K&amp;R) written by Brian Kernighan and Dennis Ritchie
  about 18 years ago during my engineering studies. The subject of
  pointers was generally believed to be scary among fellow students
  and many of them bought pretty fat books that were dedicated solely
  to the topic of pointers. However, when I reached Chapter 5 of the
  book , I found that it did a wonderful job at teaching pointers in
  merely 34 pages. The chapter opens with this sentence:
</p>
<blockquote>
  A pointer is a variable that contains the address of a variable.
</blockquote>
<p>
  The exact point at which the whole topic of pointers became crystal
  clear was when I encountered this sentence in &sect; 5.3 Pointers
  and Arrays:
</p>
<blockquote>
  Rather more surprising, at first sight, is the fact that a reference
  to <code>a[i]</code> can also be written as <code>*(a+i)</code>.
</blockquote>
<p>
  Indeed, it was easy to confirm that by compiling and running the
  following program:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main() {
    int a[] = {2, 3, 5, 7, 11};
    printf("%d\n", *(a + 2));
    printf("%d\n", a[2]);
    printf("%d\n", 2[a]);
    return 0;
}</code>
</pre>
<p>
  The output is:
</p>
<pre>
<samp>5
5
5</samp>
</pre>
<p>
  C was the first serious programming language I was learning back
  then and at that time, I don't think I could have come across a
  better book than K&amp;R to learn this subject. Like many others, I
  too feel that this book is a model for technical writing. I wish
  more technical books were written like this with clear presentation
  and concise treatment.
</p>

<p><a href="https://susam.in/maze/pointers-in-knr.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Leap Year Test in K&amp;R</title>
<link>https://susam.in/maze/leap-year-test-in-knr.html</link>
<guid>https://susam.in/maze/leap-year-test-in-knr.html</guid>
<description>
<![CDATA[
<p>
  I learnt the following test for leap year early in my programming
  life from the book <em>The C Programming Language, 2nd ed.</em>
  (K&amp;R) written by Brian Kernighan and Dennis Ritchie about 18
  years ago during my engineering studies. &sect; 2.5
  (Arithmetic Operators) of the book uses the following test:
</p>
<pre>
<code>(year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0</code>
</pre>
<p>
  By the way, the following test also works:
</p>
<pre>
<code>year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0)</code>
</pre>

<p><a href="https://susam.in/maze/leap-year-test-in-knr.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Sticking With MathJax</title>
<link>https://susam.in/maze/sticking-with-mathjax.html</link>
<guid>https://susam.in/maze/sticking-with-mathjax.html</guid>
<description>
<![CDATA[
<p>
  I have considered switching from MathJax to KaTeX for my
  MathJax-based projects such
  as <a href="https://github.com/susam/texme">TeXMe</a>
  and <a href="https://github.com/susam/mathbin">MathBin</a> but I had
  to decide against doing so because MathJax supports commands
  like <code>\label</code>, <code>\eqref</code>, <code>\notag</code>,
  etc. and environments
  like <code>align</code>, <code>multiline</code>, etc. KaTeX does not
  support them, so switching to KaTeX would break many existing
  documents written using TeXMe or MathBin. I am going to stick with
  MathJax for now.
</p>
<p>
  Here are some useful resources:
</p>
<ul>
  <li>
    <a href="http://docs.mathjax.org/en/latest/input/tex/macros/">MathJax: Supported TeX/LaTeX commands</a>
  </li>
  <li>
    <a href="https://katex.org/docs/supported.html">KaTeX: Supported Functions</a>
  </li>
</ul>

<p><a href="https://susam.in/maze/sticking-with-mathjax.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>C Standard Terms for Behaviour</title>
<link>https://susam.in/maze/c-standard-terms-for-behaviour.html</link>
<guid>https://susam.in/maze/c-standard-terms-for-behaviour.html</guid>
<description>
<![CDATA[
<p>
  Here are some excerpts from the final drafts of the C99 and C11
  standards <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">n1256.pdf</a>
  and <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">n1570.pdf</a>,
  respectively.
</p>
<ul>
  <li>
    <p>
      <strong>§3.4.0: behavior:</strong> external appearance or action
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.1: implementation-defined behavior:</strong>
      unspecified behavior where each implementation documents how the
      choice is made.
    </p>
    <p>
      EXAMPLE: An example of implementation-defined behavior is the
      propagation of the high-order bit when a signed integer is
      shifted right.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.2: locale-specific behavior:</strong> behavior that
      depends on local conventions of nationality, culture, and
      language that each implementation documents.
    </p>
    <p>
      EXAMPLE: An example of locale-specific behavior is whether the
      <code>islower</code> function returns true for characters other
      than the 26 lowercase Latin letters.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.3: undefined behavior:</strong> behavior, upon use
      of a nonportable or erroneous program construct or of erroneous
      data, for which this International Standard imposes no
      requirements.
    </p>
    <p>
      NOTE: Possible undefined behavior ranges from ignoring the
      situation completely with unpredictable results, to behaving
      during translation or program execution in a documented manner
      characteristic of the environment (with or without the issuance
      of a diagnostic message), to terminating a translation or
      execution (with the issuance of a diagnostic message).
    </p>
    <p>
      EXAMPLE: An example of undefined behavior is the behavior on
      integer overflow.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.4: unspecified behavior:</strong> use of an
      unspecified value, or other behavior where this International
      Standard provides two or more possibilities and imposes no
      further requirements on which is chosen in any instance.
    </p>
    <p>
      EXAMPLE: An example of unspecified behavior is the order in
      which the arguments to a function are evaluated.
    </p>
  </li>
</ul>

<p><a href="https://susam.in/maze/c-standard-terms-for-behaviour.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
</item>
<item>
<title>Building Common Lisp Executables</title>
<link>https://susam.in/maze/building-common-lisp-executables.html</link>
<guid>https://susam.in/maze/building-common-lisp-executables.html</guid>
<description>
<![CDATA[
<p>
  Since Common Lisp is a language standard (not an implementation) it
  is hard to provide a single set of instructions or guidelines that
  would work for all implementations. There are various
  implementations of Common Lisp that target native machine code, C
  code, bytecode, JVM, etc. So the build instructions, project
  structure, etc. depend on the target.
</p>

<h2 id="using-sbcl">Using SBCL<a href="#using-sbcl"></a></h2>
<p>
  Here is a minimal example that builds a Lisp program into a binary
  executable with SBCL:
</p>
<p>
<pre>
<code>(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)</code>
</pre>
<p>
  The SBCL-specific <code>save-lisp-and-die</code> function saves the
  Lisp process as a core image. The <code>:executable t</code> keyword
  argument includes the SBCL runtime in the image to ensure that the
  image is a standalone executable. This is why the executable for
  even a simple hello-world program tends to be quite large (30 MB to
  50 MB)! The <code>:toplevel</code> argument specifies the function
  to run when the core file is run.
</p>
<p>
  Here are some example commands to get you started:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)
$ <kbd>sbcl --load hello.lisp</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="moving-unportable-code-to-command-line-argument">Moving Unportable Code to Command Line Argument<a href="#moving-unportable-code-to-command-line-argument"></a></h2>
<p>
  If you would rather not have SBCL specific code in the Lisp source
  code file, then you could move
  the <code>sb-ext:save-lisp-and-die</code> call out of your source
  file to the SBCL command invocation. The source code now looks like
  this:
</p>
<pre>
<samp>(defun main ()
  (format t "hello, world~%"))</samp>
</pre>
<p>
  The shell commands now look like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
$ <kbd>sbcl --load hello.lisp --eval "(sb-ext:save-lisp-and-die \"hello\" :executable t :toplevel #'main)"</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="using-buildapp">Using Buildapp<a href="#using-buildapp"></a></h2>
<p>
  By the way, there is
  also <a href="https://www.xach.com/lisp/buildapp/">Buildapp</a> that
  provides a layer of abstraction for building executables from Lisp
  programs. It works with SBCL and CCL. It requires the toplevel
  function to be called with an argument though. Therefore the source
  code needs to be modified to the following:
</p>
<pre>
<code>(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))</code>
</pre>
<p>
Then Buildapp can be invoked like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))
$ <kbd>buildapp --load hello.lisp --entry main --output hello</kbd>
;; loading file #P"/Users/susam/hello.lisp"
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>  

<p><a href="https://susam.in/maze/building-common-lisp-executables.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
</item>
<item>
<title>Ternary Operator Puzzle</title>
<link>https://susam.in/maze/ternary-operator-puzzle.html</link>
<guid>https://susam.in/maze/ternary-operator-puzzle.html</guid>
<description>
<![CDATA[
<p>
  What is the shortest statement you can write in the C or C++
  programming language to express the following statement?
</p>
<pre><code>a = (a == 0 ? 0 : 1);</code></pre>
<p>
  See the comments page for the solution.
</p>

<p><a href="https://susam.in/maze/ternary-operator-puzzle.html">Read on website</a></p>
]]>
</description>
<pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
</item>
<item>
<title>Correctly Printing STAFString</title>
<link>https://susam.in/maze/correctly-printing-stafstring.html</link>
<guid>https://susam.in/maze/correctly-printing-stafstring.html</guid>
<description>
<![CDATA[
<p>
  At RSA, we use <a href="http://staf.sourceforge.net/">Software
  Testing Automation Framework (STAF)</a> to automate testing our
  products. Recently, I ran into a bug that occurred due
  to <code>STAFResult::STAFString</code> not being null-terminated.
  Here is an example C++ program that demonstrates the issue:
</p>
<pre>
<code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

#include "STAF.h"
#include "STAFString.h"

int main(int argc, char **argv)
{
    STAFString name("foo");
    STAFHandlePtr handle;

    int rc = STAFHandle::create(name, handle);
    if (rc != 0) {
        std::cerr &lt;&lt; "Could not create STAF handle; error code: "
                  &lt;&lt; rc &lt;&lt; endl;
        return 1;
    }

    STAFResultPtr result = handle-&gt;submit("127.0.0.1", "VAR",
                                          "RESOLVE STRING {STAF/Env/DUMMY}");
    if (result-&gt;rc != 0) {
        std::cerr &lt;&lt; "Could not run STAF command; error code: "
                  &lt;&lt; rc &lt;&lt; "\n";
        return 1;
    }

    STAFString output = result-&gt;result;
    std::cout &lt;&lt; "Output: " &lt;&lt; output.buffer() &lt;&lt; "\n";
}</code>
</pre>
<p>
  Here is an example output of the above program:
</p>
<pre>
<samp>C:\&gt;<kbd>echo %DUMMY%</kbd>
Why__does__it__break
C:\&gt;<kbd>STAFExperiments.exe</kbd>
Output: Why__does__it__break/Env/DUMMY}}
</pre>
<p>
The substring <code>/Env/DUMMY</code> at the end of the output is
garbage. The result is not null-terminated in the output buffer. Here
is the correct way to print the output:
</p>
<pre>
<code>std::cout &lt;&lt; "Output: " &lt;&lt; string(output.buffer(), output.length()) &lt;&lt; "\n";</code>
</pre>

<p><a href="https://susam.in/maze/correctly-printing-stafstring.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 04 Jun 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Zero Length Regular Expression</title>
<link>https://susam.in/maze/zero-length-regular-expression.html</link>
<guid>https://susam.in/maze/zero-length-regular-expression.html</guid>
<description>
<![CDATA[
<p>
  This post presents a list of how zero length regular expression is
  handled in various tools and programming languages. All of them
  compile the zero length regular expression pattern and the regular
  expression matches all strings.
</p>

<h2 id="gnu-grep">GNU grep<a href="#gnu-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>

<h2 id="bsd-grep">BSD grep<a href="#bsd-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>

<h2 id="perl">Perl<a href="#perl"></a></h2>
<pre>
<samp>$ <kbd>perl -e 'print(("foo" =~ //) .  "\n")'</kbd>
1</samp>
</pre>

<h2 id="python">Python<a href="#python"></a></h2>
<pre>
<samp>$ <kbd>python</kbd>
Python 2.5.2 (r252:60911, Jan  4 2009, 21:59:32)
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <kbd>import re; re.compile('').search('foo')</kbd>
&lt;_sre.SRE_Match object at 0x7fc6c5a2c510&gt;
</pre>

<h2 id="java">Java<a href="#java"></a></h2>
<pre>
<samp>$ <kbd>cat RegexExperiment.java</kbd>
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class RegexExperiment
{
    public static void main(String[] args)
    {
        System.out.println(Pattern.compile("").matcher("foo").find());
    }
}
$ <kbd>javac RegexExperiment.java && java RegexExperiment</kbd>
true</samp>
</pre>

<h2 id="mzscheme">MzScheme<a href="#mzscheme"></a></h2>
<pre>
<samp>$ <kbd>mzscheme</kbd>
Welcome to MzScheme v4.0.1 [3m], Copyright (c) 2004-2008 PLT Scheme Inc.
> <kbd>(regexp-match "" "foo")</kbd>
("")</samp>
</pre>

<h2 id="clisp">CLISP<a href="#clisp"></a></h2>
<pre>
<samp>$ <kbd>clisp</kbd>
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.44.1 (2008-02-23) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

[1]> <kbd>(regexp:match "" "foo")</kbd>
#S(REGEXP:MATCH :START 0 :END 0)</samp>
</pre>

<h2 id="c">C<a href="#c"></a></h2>
<pre>
<samp>$ <kbd>ls -l /usr/lib/libpcre.so*</kbd>
lrwxrwxrwx 1 root root     17 May  3 15:15 /usr/lib/libpcre.so -> libpcre.so.3.12.1
lrwxrwxrwx 1 root root     17 Jan  6 14:57 /usr/lib/libpcre.so.3 -> libpcre.so.3.12.1
-rw-r--r-- 1 root root 162816 Jul 14  2008 /usr/lib/libpcre.so.3.12.1
susam@swift:~$ <kbd>cat pcre.c</kbd>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

int main(int argc, char **argv)
{
    pcre *p;
    char *re = "";
    char *s  = "foo";
    const char *errmsg;
    int errpos;
    int ovector[10];
    int ret;

    p = pcre_compile(re, 0, &amp;errmsg, &amp;errpos, NULL);
    ret = pcre_exec(p, NULL, s, strlen(s), 0, 0,
                    ovector, sizeof ovector / sizeof *ovector);

    printf(ret &lt; 0 ? "no match\n" : "match\n");
}
$ <kbd>cc -lpcre pcre.c && ./a.out</kbd>
match</samp>
</pre>

<p><a href="https://susam.in/maze/zero-length-regular-expression.html">Read on website</a></p>
]]>
</description>
<pubDate>Mon, 03 May 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Minimal Installation of WinHTTP API</title>
<link>https://susam.in/maze/minimal-installation-of-winhttp-api.html</link>
<guid>https://susam.in/maze/minimal-installation-of-winhttp-api.html</guid>
<description>
<![CDATA[
<p>
  Here are the steps to perform for a minimal download and
  installation of WinHTTP API for C++ so that we have the
  the <code>winhttp.lib</code> and <code>winhttp.h</code> files while
  writing C++ programs using the WinHTTP API:
</p>
<ol>
  <li>Download PSDK-x86.exe
  from <a href="https://web.archive.org/web/20100507044252/http://www.microsoft.com/downloads/details.aspx?familyid=0BAF2B35-C656-4969-ACE8-E4C0C0716ADB&displaylang=en">Microsoft
      ® Windows Server® 2003 R2 Platform SDK Web Install</a>.
  </li>
  <li>
    Run the installer, select <em>Custom</em> installation type, clear
    all categories and select <em>Microsoft Windows Core SDK</em> &gt;
    <em>Build Environment</em> &gt; <em>Build Environment (x86
    32-bit)</em>.
  </li>
</ol>
<p>
  After the installation is complete, the <code>winhttp.h</code> file
  can be found at <code>C:\Program Files\Microsoft Platform SDK Server
    2003 R2\Include</code>.
</p>

<p><a href="https://susam.in/maze/minimal-installation-of-winhttp-api.html">Read on website</a></p>
]]>
</description>
<pubDate>Wed, 14 Apr 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Lucene Java Example</title>
<link>https://susam.in/maze/lucene-java-example.html</link>
<guid>https://susam.in/maze/lucene-java-example.html</guid>
<description>
<![CDATA[
<p>
  Here is a simple program I wrote that makes use of Lucene Java
  3.0.1:
</p>

<pre>
<code>package in.susam;

import java.io.File;
import java.io.IOException;

import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.util.Version;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;

public class LuceneDemo
{
    static final String INDEX_DIR = "index1";
 
    public static void main(String[] args) throws Exception {
        write();
        search("content", "integer");
        search("tags", "rhyme");
    }
    
    static void write() throws IOException {
        // Create index
        IndexWriter writer = new IndexWriter(
                FSDirectory.open(new File(INDEX_DIR)),
                new StandardAnalyzer(Version.LUCENE_30),
                true,
                IndexWriter.MaxFieldLength.UNLIMITED);
 
        Document doc;
        String field;
        String text;
 
        // Add first document
        doc = new Document();

        field = "title";
        text = "Humpty Dumpty sat on a wall";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "Humpty Dumpty sat on a wall.\n" +
               "Humpty Dumpty had a great fall;\n" +
               "All the King's horses and all the King's men,\n" +
               "Couldn't put Humpty together again.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "tags";
        text = "rhyme";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        writer.addDocument(doc);

        // Add second document
        doc = new Document();

        field = "title";
        text = "Jack and Jill went up the hill";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "content";
        text = "Jack and Jill went up the hill\n" +
               "To fetch a pail of water.\n" +
               "Jack fell down and broke his crown,\n" +
               "And Jill came tumbling after.\n"; 
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "rhyme";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        writer.addDocument(doc);
        
        // Add third document
        doc = new Document();
        
        field = "title";
        text = "Fermat's Last Theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "In number theory, Fermat's Last Theorem states that no " +
               "three positive integers a, b, and c can satisfy the " +
               "equation for a^n + b^n = c^n for any integer value of n " +
               "greater than two.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "tags";
        text = "math, theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        writer.addDocument(doc);
        
        // Add fourth document
        doc = new Document();
      
        field = "title";
        text = "Euler's theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "content";
        text = "Euler's theorem states that if n is a positive integer and " +
               "a is a positive integer coprime to n, then a^phi(n) = 1 " +
               "(mod n) where phi(n) is Euler's totient function.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));
        
        field = "tags";
        text = "math, theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        writer.close();
    }
    
    static void search(String field, String query) throws IOException,
                                                          ParseException {
        IndexSearcher searcher = new IndexSearcher(
                FSDirectory.open(new File(INDEX_DIR)), true);
        QueryParser parser = new QueryParser(
                Version.LUCENE_30, field,
                new StandardAnalyzer(Version.LUCENE_30));
        TopDocs docs = searcher.search(parser.parse(query), 10);
        System.out.println("Query: '" + query + "' in '" + field + "'");
        System.out.println("Total hits: " + docs.totalHits);
        System.out.println("");
        for (int i = 0; i < docs.scoreDocs.length; i++) {
            ScoreDoc hit = docs.scoreDocs[i];
            Document doc = searcher.doc(hit.doc);
            System.out.println("#" + i);
            System.out.println("title: " + doc.get("title"));
            System.out.println("content: " + doc.get("content"));
            System.out.println("tags: " + doc.get("tags"));
            System.out.println("id: " + hit.doc);
            System.out.println("score: " + hit.score);
            System.out.println();
        }
    }
}</code>
</pre>
<p>
  Here is the output when the above code is compiled and run:
</p>
<pre>
<samp>Query: 'integer' in 'content'
Total hits: 2

#0
title: Euler's theorem
content: Euler's theorem states that if n is a positive integer and a is a positive integer coprime to n, then a^phi(n) = 1 (mod n) where phi(n) is Euler's totient function.
tags: math, theorem
id: 3
score: 0.34144828

#1
title: Fermat's Last Theorem
content: In number theory, Fermat's Last Theorem states that no three positive integers a, b, and c can satisfy the equation for a^n + b^n = c^n for any integer value of n greater than two.
tags: math, theorem
id: 2
score: 0.24144039

Query: 'rhyme' in 'tags'
Total hits: 2

#0
title: Humpty Dumpty sat on a wall
content: Humpty Dumpty sat on a wall.
Humpty Dumpty had a great fall;
All the King's horses and all the King's men,
Couldn't put Humpty together again.
tags: rhyme
id: 0
score: 1.287682

#1
title: Jack and Jill went up the hill
content: Jack and Jill went up the hill
To fetch a pail of water.
Jack fell down and broke his crown,
And Jill came tumbling after.

tags: rhyme
id: 1
score: 1.287682
</samp></pre>

<p><a href="https://susam.in/maze/lucene-java-example.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 10 Apr 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>ResizableDoubleArray contract() and expand()</title>
<link>https://susam.in/maze/resizabledoublearray-contract-and-expand.html</link>
<guid>https://susam.in/maze/resizabledoublearray-contract-and-expand.html</guid>
<description>
<![CDATA[
<p>
  Here is a diff of the changes I made to Apache Common Math's
  <code>ResizableDoubleArray</code> class to investigate how it
  contracts or expands its internal capacity.
</p>
<pre>
<code>Index: src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java
===================================================================
--- src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java (revision 925455)
+++ src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java (working copy)
@@ -157,6 +157,14 @@
     public ResizableDoubleArray(int initialCapacity) {
         setInitialCapacity(initialCapacity);
         internalArray = new double[this.initialCapacity];
+        System.out.println(":::: initialCapacity: " + initialCapacity);
+        System.out.println(":::: expansionMode: " +
+                           (expansionMode == 0 ? "MULTIPLICATIVE_MODE"
+                                               : "ADDITIVE_MODE" ));
+        System.out.println(":::: expansionFactor: " + expansionFactor);
+        System.out.println(":::: contractionCriteria: " +
+                           contractionCriteria);
+        System.out.println();
     }
 
     /**
@@ -264,14 +272,33 @@
      * @param value to be added to end of array
      */
     public synchronized void addElement(double value) {
+        System.out.println(":::: addElement(" + value + ")");
+        System.out.println(":::: startIndex: " + startIndex);
+        System.out.println(":::: internalArray.length: " +
+                           internalArray.length);
         numElements++;
+        System.out.println(":::: numElements incremented to: " +
+                           numElements);
+
         if ((startIndex + numElements) > internalArray.length) {
+            System.out.println(":::: expanding ...");
             expand();
+            System.out.println(":::: expanded; internalArray.length: " +
+                               internalArray.length);
         }
         internalArray[startIndex + (numElements - 1)] = value;
+        System.out.print(":::: internalArray: ");
+        for (int i = 0; i < startIndex + numElements; i++) {
+            System.out.print(internalArray[i] + ", ");
+        }
+        System.out.println();
         if (shouldContract()) {
+            System.out.println(":::: contracting ...");
             contract();
+            System.out.println(":::: contracted; internalArray.length: " +
+                               internalArray.length);
         }
+        System.out.println();
     }
 
     /**</code>
</pre>
<p>
  Here is a tiny test program to use <code>ResizableDoubleArray</code>.
</p>
<pre>
<code>import org.apache.commons.math.util.ResizableDoubleArray;

public class RDAContractExpand
{
    public static void main(String[] args)
    {
        ResizableDoubleArray rda = new ResizableDoubleArray(10);
        for (int i = 0; i < 10; i++)
            rda.addElement(i);
    }
}</code>
</pre>
<p>
  Here is the output of the above program:
</p>
<pre>
<samp>:::: initialCapacity: 10
:::: expansionMode: MULTIPLICATIVE_MODE
:::: expansionFactor: 2.0
:::: contractionCriteria: 2.5

:::: addElement(0.0)
:::: startIndex: 0
:::: internalArray.length: 10
:::: numElements incremented to: 1
:::: internalArray: 0.0,
:::: contracting ...
:::: contracted; internalArray.length: 2

:::: addElement(1.0)
:::: startIndex: 0
:::: internalArray.length: 2
:::: numElements incremented to: 2
:::: internalArray: 0.0, 1.0,

:::: addElement(2.0)
:::: startIndex: 0
:::: internalArray.length: 2
:::: numElements incremented to: 3
:::: expanding ...
:::: expanded; internalArray.length: 4
:::: internalArray: 0.0, 1.0, 2.0,

:::: addElement(3.0)
:::: startIndex: 0
:::: internalArray.length: 4
:::: numElements incremented to: 4
:::: internalArray: 0.0, 1.0, 2.0, 3.0,

:::: addElement(4.0)
:::: startIndex: 0
:::: internalArray.length: 4
:::: numElements incremented to: 5
:::: expanding ...
:::: expanded; internalArray.length: 8
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0,

:::: addElement(5.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 6
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0,

:::: addElement(6.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 7
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0,

:::: addElement(7.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 8
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,

:::: addElement(8.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 9
:::: expanding ...
:::: expanded; internalArray.length: 16
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,

:::: addElement(9.0)
:::: startIndex: 0
:::: internalArray.length: 16
:::: numElements incremented to: 10
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,</samp>
</pre>

<p><a href="https://susam.in/maze/resizabledoublearray-contract-and-expand.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 23 Mar 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Decode Stumped</title>
<link>https://susam.in/maze/decode-stumped.html</link>
<guid>https://susam.in/maze/decode-stumped.html</guid>
<description>
<![CDATA[
<p>
  A few weeks ago, someone posted a C programming puzzle to
  the <a href="mailto:ncoders@yahoogroups.com">ncoders</a> mailing
  list. This is a mailing list I formed a few months ago to host
  discussions on computers, programming, and network protocols among
  university students. The programming puzzle that was posted asked if
  we could write a C program such that the <code>main()</code>
  function <em>does not seem to appear</em> in the code. Here is a
  solution I could come up with that involves obfuscating the
  identifer <code>main</code> using preprocessor macros and
  the <code>##</code> preprocessing operator for token concatenation.
</p>
<pre>
<code>#include &lt;stdio.h&gt;

#define decode(s,t,u,m,p,e,d) m ## s ## u ## t
#define begin decode(a,n,i,m,a,t,e)

int begin()
{
    printf("Stumped?\n");
}</code>
</pre>
<p>
This program compiles and runs successfully. Here is the output:
</p>
<pre><samp>Stumped?</samp></pre>
<p>
  Let me explain how this code works. When the C preprocessor runs on
  this code, the following preprocessing steps occur:
</p>
<ul>
  <li>
    <code>begin</code> is replaced with <code>decode(a,n,i,m,a,t,e)</code>,
  </li>
  <li>
    <code>decode(a,n,i,m,a,t,e)</code> is replaced with <code>m ## a
    ## i ## n</code>, and
  </li>
  <li>
    <code>m ## a ## i ## n</code> is replaced with <code>main</code>.
  </li>
</ul>
<p>
  Thus <code>begin()</code> is replaced with <code>main()</code>.
</p>
<p>
  <strong>Update on 31 Jul 2007:</strong> Although the mailing list
  referred to in this post no longer exists, this tiny piece of code
  seems to have survived on the web. A
  <a href="https://www.google.com/search?q=decode(s%2Ct%2Cu%2Cm%2Cp%2Ce%2Cd)">quick
  search</a> shows so many occurrences of this code on the web. It is
  quite surprising to me that a rather silly piece of code written
  during a Sunday afternoon to solve an equally silly puzzle has been
  the subject of much discussion!
</p>

<p><a href="https://susam.in/maze/decode-stumped.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 02 Nov 2003 00:00:00 +0000</pubDate>
</item>
<item>
<title>C Quine</title>
<link>https://susam.in/maze/c-quine.html</link>
<guid>https://susam.in/maze/c-quine.html</guid>
<description>
<![CDATA[
<p>
  I have been running a mailing list
  named <a href="mailto:ncoders@yahoogroups.com">ncoders</a> for the
  last several months now. This mailing list is meant for university
  students interested in computers, programming, and network
  protocols.
</p>
<p>
  A few weeks ago, Vikram Agrawal, a very knowledgeable member of this
  mailing list introduced us to an interesting type of computer
  program called <em>quine</em>. A quine is a computer program that
  produces an exact copy of its own source code as its output. It must
  not consume any input, so tricks involving reading its own source
  code and printing it are not permitted.
</p>

<h2 id="classic-quine">The Classic Quine<a href="#classic-quine"></a></h2>
<p>
  Here is a classic quine Vikram shared with us while explaining the
  concept of quine:
</p>
<pre>
<code>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</code>
</pre>
<p>
  This program is written in K&amp;R C. The current version of GCC
  compiles it fine. It is a valid quine on ASCII machines because this
  program uses the integer code <code>34</code> to print the quotation
  mark (<code>"</code>) character. This will be explained further in
  the next section. On another implementation of the C compiler which
  does not use ASCII code for the quotation mark character, the
  program needs to be modified to the use the correct code.
</p>
<p>
  Here are some commands that demonstrate the quine:
</p>
<pre>
$ <kbd>echo -n 'main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}' > quine.c</kbd>
$ <kbd>cc quine.c</kbd>
$ <kbd>./a.out > out.txt</kbd>
$ <kbd>diff quine.c out.txt</kbd>
$ <kbd>./a.out</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}
</pre>
<p>
  The source code of this quine does not end with a newline.
  The <code>-n</code> option of GNU echo ensures that the source code
  file is created without a terminating newline.
</p>

<h2 id="close-look-at-classic-quine">Close Look at the Classic Quine<a href="#close-look-at-classic-quine"></a></h2>
<p>
  Let us take a close look at how the quine introduced in the previous
  section works. Let us add some newlines in the source code of this
  quine for the sake of clarity.
</p>
<pre>
<code>main()
{
    char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";
    printf(s,34,s,34);
}</code>
</pre>
<p>
  This is almost the same program presented in the previous section.
  Only a few newlines have been added to it to make the program easier
  to read.
</p>
<p>
  We can see that the <code>printf</code> call uses the
  string <code>s</code> as the format string. The format string
  contains three conversion
  specifications: <code>%c</code>, <code>%s</code>,
  and <code>%c</code>. The arguments for these conversions
  are: <code>34</code>, the string <code>s</code> itself,
  and <code>34</code> once again. Note that <code>34</code> is the
  ASCII code for the quotation mark character (<code>"</code>). With
  that in mind, let us now construct the output of
  the <code>printf</code> call in a step-by-step manner.
</p>
<p>
  The initial portion of the output consists of the format string from
  the beginning up to, but not including, the first conversion
  specification copied unchanged to the output stream. Here it is:
</p>
<pre><samp>main(){char*s=</samp></pre>
<p>
  Then the first conversion specification <code>%c</code> is
  processed, the corresponnding argument <code>34</code> is taken, and
  a quotation mark is printed like this:
</p>
<pre><samp>"</samp></pre>
<p>
  Then the second conversion specification <code>%s</code> is
  processed. The corresponding argument is the string <code>s</code>
  itself, so the entire string is printed like this:
</p>
<pre><samp>main(){char*s=%c%s%c;printf(s,34,s,34);}</samp></pre>
<p>
  Then the third conversion specification <code>%c</code> is
  processed. The corresponding argument is <code>34</code> again, so
  once again a quotation mark is printed like this:
</p>
<pre><samp>"</samp></pre>
<p>
  Finally, the rest of the format string is copied unchanged to
  produce the following output:
</p>
<pre><samp>;printf(s,34,s,34);}</samp></pre>
<p>
  Here are all the five parts of the output presented next to each other:
</p>
<pre><samp>main(){char*s=</samp></pre>
<pre><samp>"</samp></pre>
<pre><samp>main(){char*s=%c%s%c;printf(s,34,s,34);}</samp></pre>
<pre><samp>"</samp></pre>
<pre><samp>;printf(s,34,s,34);}</samp></pre>
<p>
  Writing them all out in a single line, we get this:
</p>
<pre>
<samp>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</samp>
</pre>
<p>
  This output matches the source code of the program thus confirming
  that our program is a quine.
</p>

<h2 id="classic-quine-with-terminating-newline">Classic Quine With Terminating Newline<a href="#classic-quine-with-terminating-newline"></a></h2>
<p>
  The source code of the classic quine presented above does not
  terminate with a newline. I found that a little bothersome because I
  am used to always terminating my source code with a single trailing
  newline at the end. So I decided to modify that quine a little to
  ensure that it always ends with a newline. This is the quine I arrived at:
</p>
<pre>
<samp>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}</samp>
</pre>
<p>
  Compared to the quine in the previous sections, this one has an
  additional <code>%c</code> at the end of the formal string and the
  integer <code>10</code> as the corresponding argument to ensure that
  the output ends with a newline. Here is a demonstration of this
  quine:
</p>
<pre>
$ <kbd>echo 'main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}' > quine.c</kbd>
$ <kbd>cc quine.c</kbd>
$ <kbd>./a.out > out.txt</kbd>
$ <kbd>diff quine.c out.txt</kbd>
$ <kbd>./a.out</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}
</pre>

<p><a href="https://susam.in/maze/c-quine.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 19 Oct 2003 00:00:00 +0000</pubDate>
</item>


</channel>
</rss>
