<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Notes Maze</title>
<link>https://susam.in/maze/</link>
<atom:link href="https://susam.in/maze/rss.xml"
           rel="self" type="application/rss+xml"/>
<description>Feed from Susam's Notes Maze</description>

<item>
<title>Pointers in K&amp;R</title>
<link>https://susam.in/maze/pointers-in-knr.html</link>
<guid>https://susam.in/maze/pointers-in-knr.html</guid>
<description>
<![CDATA[
<p>
  I learnt C from the book <em>The C Programming Language, 2nd
  ed.</em> (K&amp;R) written by Brian Kernighan and Dennis Ritchie
  about 18 years ago during my engineering studies. The subject of
  pointers was generally believed to be scary among fellow students
  and many of them bought pretty fat books that were dedicated solely
  to the topic of pointers. However, when I reached Chapter 5 of the
  book , I found that it did a wonderful job at teaching pointers in
  merely 34 pages. The chapter opens with this sentence:
</p>
<blockquote>
  A pointer is a variable that contains the address of a variable.
</blockquote>
<p>
  The exact point at which the whole topic of pointers became crystal
  clear was when I encountered this sentence in &sect; 5.3 Pointers
  and Arrays:
</p>
<blockquote>
  Rather more surprising, at first sight, is the fact that a reference
  to <code>a[i]</code> can also be written as <code>*(a+i)</code>.
</blockquote>
<p>
  Indeed, it was easy to confirm that by compiling and running the
  following program:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main() {
    int a[] = {2, 3, 5, 7, 11};
    printf("%d\n", *(a + 2));
    printf("%d\n", a[2]);
    printf("%d\n", 2[a]);
    return 0;
}</code>
</pre>
<p>
  The output is:
</p>
<pre>
<samp>5
5
5</samp>
</pre>
<p>
  C was the first serious programming language I was learning back
  then and at that time, I don't think I could have come across a
  better book than K&amp;R to learn this subject. Like many others, I
  too feel that this book is a model for technical writing. I wish
  more technical books were written like this with clear presentation
  and concise treatment.
</p>

<p><a href="https://susam.in/maze/pointers-in-knr.html">Read on website</a></p>
]]>
</description>
<pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>Leap Year Test in K&amp;R</title>
<link>https://susam.in/maze/leap-year-test-in-knr.html</link>
<guid>https://susam.in/maze/leap-year-test-in-knr.html</guid>
<description>
<![CDATA[
<p>
  I learnt the following test for leap year early in my programming
  life from the book <em>The C Programming Language, 2nd ed.</em>
  (K&amp;R) written by Brian Kernighan and Dennis Ritchie about 18
  years ago during my engineering studies. &sect; 2.5
  (Arithmetic Operators) of the book uses the following test:
</p>
<pre>
<code>(year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0</code>
</pre>
<p>
  By the way, the following test also works:
</p>
<pre>
<code>year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0)</code>
</pre>

<p><a href="https://susam.in/maze/leap-year-test-in-knr.html">Read on website</a></p>
]]>
</description>
<pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
</item>
<item>
<title>C Standard Terms for Behaviour</title>
<link>https://susam.in/maze/c-standard-terms-for-behaviour.html</link>
<guid>https://susam.in/maze/c-standard-terms-for-behaviour.html</guid>
<description>
<![CDATA[
<p>
  Here are some excerpts from the final drafts of the C99 and C11
  standards <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">n1256.pdf</a>
  and <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">n1570.pdf</a>,
  respectively.
</p>
<ul>
  <li>
    <p>
      <strong>§3.4.0: behavior:</strong> external appearance or action
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.1: implementation-defined behavior:</strong>
      unspecified behavior where each implementation documents how the
      choice is made.
    </p>
    <p>
      EXAMPLE: An example of implementation-defined behavior is the
      propagation of the high-order bit when a signed integer is
      shifted right.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.2: locale-specific behavior:</strong> behavior that
      depends on local conventions of nationality, culture, and
      language that each implementation documents.
    </p>
    <p>
      EXAMPLE: An example of locale-specific behavior is whether the
      <code>islower</code> function returns true for characters other
      than the 26 lowercase Latin letters.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.3: undefined behavior:</strong> behavior, upon use
      of a nonportable or erroneous program construct or of erroneous
      data, for which this International Standard imposes no
      requirements.
    </p>
    <p>
      NOTE: Possible undefined behavior ranges from ignoring the
      situation completely with unpredictable results, to behaving
      during translation or program execution in a documented manner
      characteristic of the environment (with or without the issuance
      of a diagnostic message), to terminating a translation or
      execution (with the issuance of a diagnostic message).
    </p>
    <p>
      EXAMPLE: An example of undefined behavior is the behavior on
      integer overflow.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.4: unspecified behavior:</strong> use of an
      unspecified value, or other behavior where this International
      Standard provides two or more possibilities and imposes no
      further requirements on which is chosen in any instance.
    </p>
    <p>
      EXAMPLE: An example of unspecified behavior is the order in
      which the arguments to a function are evaluated.
    </p>
  </li>
</ul>

<p><a href="https://susam.in/maze/c-standard-terms-for-behaviour.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
</item>
<item>
<title>Laws of Correction</title>
<link>https://susam.in/maze/laws-of-correction.html</link>
<guid>https://susam.in/maze/laws-of-correction.html</guid>
<description>
<![CDATA[
<h2 id="mckean-law">McKean's Law<a href="#mckean-law"></a></h2>
<blockquote>
  Any correction of the speech or writing of others will contain at
  least one grammatical, spelling, or typographical error.
</blockquote>

<h2 id="skitt-law">Skitt's Law<a href="#skitt-law"></a></h2>
<blockquote>
  Any post correcting an error in another post will contain at least
  one error itself.
</blockquote>

<h2 id="muphry-law">Muphry's Law<a href="#muphry-law"></a></h2>
<blockquote>
  If you write anything criticizing editing or proofreading, there
  will be a fault of some kind in what you have written.
</blockquote>

<h2 id="hartman-law">Hartman's Law of Prescriptivist Retaliation<a href="#hartman-law"></a></h2>
<blockquote>
  Any article or statement about correct grammar, punctuation, or
  spelling is bound to contain at least one eror.
</blockquote>

<p><a href="https://susam.in/maze/laws-of-correction.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 18 Jun 2010 00:00:00 +0000</pubDate>
</item>


</channel>
</rss>
