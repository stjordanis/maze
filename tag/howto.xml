<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's HowTo Maze</title>
<link>https://susam.in/maze/</link>
<atom:link href="https://susam.in/maze/rss.xml"
           rel="self" type="application/rss+xml"/>
<description>Feed from Susam's HowTo Maze</description>

<item>
<title>Algorithms Channel Migrates to Libera Chat</title>
<link>https://susam.in/maze/algorithms-channel-migrates-to-libera-chat.html</link>
<guid>https://susam.in/maze/algorithms-channel-migrates-to-libera-chat.html</guid>
<description>
<![CDATA[
<p>
  Our <code>##algorithms</code> that has been running on the Freenode
  IRC network for the last 14 years is now migrating to the Libera
  Chat IRC network. Our new channel name on Libera Chat
  is <code>#algorithms</code>.
</p>

<h2 id="history">History<a href="#history"></a></h2>
<p>
  The original <code>##algorithms</code> channel on Freenode IRC began
  as an offshoot of the <code>##math</code> channel there when we
  found that there was enough interest in the latter to form a channel
  dedicated to the subject of algorithms and data structures. I
  created the new channel for algorithms in 2007. I used to go by the
  nick <code>spal</code> and used to be active on both channels.
</p>
<p>
  What began as a tiny hobby club around algorithms gradually grew to
  be be a thriving community with over 200 members. I don't
  participate in the channel much anymore but a highly talented group
  of moderators helps maintain the channel.
</p>

<h2 id="migration">Migration<a href="#migration"></a></h2>
<p>
  The original Freenode staff that used to run the Freenode network
  has stepped down after a controversial change in management of
  Freenode. The former Freenode staff has now launched a new IRC
  network named <em>Libera Chat</em>. Thousands of channels that used
  to exist on Freenode IRC earlier have been rapidly migrating to
  Libera Chat now. For more on the events that led to this mass
  migration, see this
  post: <a href="https://gist.github.com/joepie91/df80d8d36cd9d1bde46ba018af497409">The
  Freenode Resignation FAQ</a>.
</p>
<p>
  The <code>##algorithms</code> channel too has now moved from
  Freenode to Libera Chat. Our new channel name
  is <code>#algorithms</code> on Libera Chat. Our entire operator team
  for the channel is also moving to the new channel. The old channel
  on Freenode should now be considered defunct.
</p>

<h2 id="old-channel-information">Old Channel Information<a href="#old-channel-information"></a></h2>
<p>
  Here is the last known good state of the <code>##algorithms</code>
  channel on Freenode before we declared the channel defunct.
</p>
<pre>
<samp><kbd>/msg chanserv info ##algorithms</kbd>
Information on ##algorithms:
Founder    : spal
Successor  : halberd
Registered : Oct 13 19:49:56 2007 (13y 31w 5d ago)
Mode lock  : +ntcC
Flags      : GUARD
*** End of Info ***</samp>
</pre>

<h2 id="new-channel-information">New Channel Information<a href="#new-channel-information"></a></h2>
<p>
  Here is the current information of the new channel
  named <code>#algorithms</code> on Libera Chat.
</p>
<pre>
<samp><kbd>/msg chanserv info #algorithms</kbd>
Information on #algorithms:
Founder    : susam
Successor  : libera-placeholder-account
Registered : May 19 14:52:38 2021 +0000 (2h ago)
Mode lock  : +nt-lk
Flags      : GUARD PUBACL
*** End of Info ***</samp>
</pre>

<h2 id="join">Join<a href="#join"></a></h2>
<p>
  If you are new to the world of IRC, here are some steps to join the
  Libera Chat IRC network:
</p>
<ol>
  <li>
    <p>
      Install Irssi, an IRC chat client. On macOS, enter the following
      command if you have Homebrew:
    </p>
    <pre><code>brew install irssi</code></pre>
    <p>
      On Debian, Ubuntu, or another Debian-based Linux system, enter
      the following command:
    </p>
    <pre><code>sudo apt-get install irssi</code></pre>
    <p>
      For other systems or environments,
      see <a href="https://irssi.org/">irssi.org</a>.
  </li>
  <li>
    <p>
      Enter the following command to connect to Libera Chat:
    </p>
    <pre><code>irssi -c irc.libera.chat</code></pre>
  </li>
  <li>
    <p>
      Now type these IRC commands into Irssi to join some channels:
    </p>
    <pre>
<code>/join #algorithms
/join #irssi
/join #libera
/join #linux</code>
</pre>
  </li>
  <li>
    <p>
      Enter this IRC command into Irssi to send me a message if you
      need any help:
    </p>
    <pre><code>/msg susam hello</code></pre>
  </li>
</ol>
<p>
  You can also join the algorithms channel via Libera Chat's web
  interface
  at <a href="https://web.libera.chat/#algorithms">web.libera.chat</a>.
  This can be useful for those who want to join the network quickly
  without installing a client. Further there is a Matrix bridge to the
  channel accessible
  via <a href="https://app.element.io/#/room/#algorithms:libera.chat">#algorithms:libera.chat</a>.
  The Matrix bridge is quite convenient for someone unfamiliar with
  IRC. For example, you can close your browser or client and your chat
  session will still stay alive on the Matrix bridge. You can connect
  back the next day and catch up with the messages. Doing that with
  IRC requires setting up an IRC bouncers which may feel like
  considerable additional work.
</p>

<h2 id="freenode-wipes-database">Freenode Wipes Database<a href="#freenode-wipes-database"></a></h2>
<p>
  <strong>Update on 15 Jun 2021:</strong> All old communities on the
  Freenode IRC network are now gone. The new Freenode staff has wiped
  out their database thereby resetting the state of their network. We
  learnt about this when we received these global notices in our
  clients connected to the Freenode IRC network:
</p>
<pre>
<samp>-root- [Global Notice 1/3] We are moving past legacy freenode to a new
       fork. The new freenode is launched. You will slowly be
       disconnected and when you reconnect, you will be on the new
       freenode. We patiently await to welcome you in freedom's
       holdout - the freenode.

-root- [Global Notice 2/3] If you're looking to connect now, you can
       already /server chat.freenode.net 6697 (ssl) or 6667
       (plaintext). It's a new genesis for a new era. Thank you for
       using freenode, and Hello World, from the future. freenode is
       IRC. freenode is FOSS. freenode is freedom.

-root- [Global Notice 3/3] When you connect, register your nickname
       and your channel and get started. It's a new world. We're so
       happy to welcome you and the millions of others. We will be
       posting more information in the coming days on our website and
       twitter. Otherwise, see you on the other side!</samp>
</pre>
<p>
  See this thread on Reddit for a discussion on this
  event: <a href="https://www.reddit.com/r/irc/comments/o01tmv">reddit.com/r/irc/comments/o01tmv</a>.
</p>
<p>
  What this really means is that decades old nicks and channels are
  completely wiped out! For example, my own 15 year old nick is now
  gone. Our algorithms channel on the Freenode network is also gone.
  All the nicks and other channels I was familiar with are also gone.
  I am not going to bother registering my nick and our channel there
  again! It is not worth it. We have all moved on to Libera Chat
  already and there is nothing left on Freenode to care about it
  anymore.
</p>

<p><a href="https://susam.in/maze/algorithms-channel-migrates-to-libera-chat.html">Read on website</a></p>
]]>
</description>
<pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
</item>
<item>
<title>Building Common Lisp Executables</title>
<link>https://susam.in/maze/building-common-lisp-executables.html</link>
<guid>https://susam.in/maze/building-common-lisp-executables.html</guid>
<description>
<![CDATA[
<p>
  Since Common Lisp is a language standard (not an implementation) it
  is hard to provide a single set of instructions or guidelines that
  would work for all implementations. There are various
  implementations of Common Lisp that target native machine code, C
  code, bytecode, JVM, etc. So the build instructions, project
  structure, etc. depend on the target.
</p>

<h2 id="using-sbcl">Using SBCL<a href="#using-sbcl"></a></h2>
<p>
  Here is a minimal example that builds a Lisp program into a binary
  executable with SBCL:
</p>
<p>
<pre>
<code>(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)</code>
</pre>
<p>
  The SBCL-specific <code>save-lisp-and-die</code> function saves the
  Lisp process as a core image. The <code>:executable t</code> keyword
  argument includes the SBCL runtime in the image to ensure that the
  image is a standalone executable. This is why the executable for
  even a simple hello-world program tends to be quite large (30 MB to
  50 MB)! The <code>:toplevel</code> argument specifies the function
  to run when the core file is run.
</p>
<p>
  Here are some example commands to get you started:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)
$ <kbd>sbcl --load hello.lisp</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="moving-unportable-code-to-command-line-argument">Moving Unportable Code to Command Line Argument<a href="#moving-unportable-code-to-command-line-argument"></a></h2>
<p>
  If you would rather not have SBCL specific code in the Lisp source
  code file, then you could move
  the <code>sb-ext:save-lisp-and-die</code> call out of your source
  file to the SBCL command invocation. The source code now looks like
  this:
</p>
<pre>
<samp>(defun main ()
  (format t "hello, world~%"))</samp>
</pre>
<p>
  The shell commands now look like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
$ <kbd>sbcl --load hello.lisp --eval "(sb-ext:save-lisp-and-die \"hello\" :executable t :toplevel #'main)"</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="using-buildapp">Using Buildapp<a href="#using-buildapp"></a></h2>
<p>
  By the way, there is
  also <a href="https://www.xach.com/lisp/buildapp/">Buildapp</a> that
  provides a layer of abstraction for building executables from Lisp
  programs. It works with SBCL and CCL. It requires the toplevel
  function to be called with an argument though. Therefore the source
  code needs to be modified to the following:
</p>
<pre>
<code>(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))</code>
</pre>
<p>
Then Buildapp can be invoked like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))
$ <kbd>buildapp --load hello.lisp --entry main --output hello</kbd>
;; loading file #P"/Users/susam/hello.lisp"
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>  

<p><a href="https://susam.in/maze/building-common-lisp-executables.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
</item>
<item>
<title>Squaring Numbers That Begin or End With 5</title>
<link>https://susam.in/maze/squaring-numbers-that-begin-or-end-with-5.html</link>
<guid>https://susam.in/maze/squaring-numbers-that-begin-or-end-with-5.html</guid>
<description>
<![CDATA[
<p>
  In this post, I will discuss some simple tricks I use to square
  numbers that begin or end with the digit \( 5 \). We will first see
  a few illustrations of each trick. Then we will generalize the
  tricks for any number that begins or ends with the digit \( 5 \).
</p>

<h2 id="squaring-a-2-digit-number-that-ends-with-5">Squaring a 2-Digit Number That Ends With 5<a href="#squaring-a-2-digit-number-that-ends-with-5"></a></h2>
<p>
  I learnt this from an arithmetic book during my childhood days. If
  the first digit of a 2-digit number is \( a \) and the second digit
  is \( 5 \) in decimal representation, then its square can then be
  written as the result of \( a \times (a + 1) \) followed by \( 25 \)
  in decimal representation, i.e., the first few digits of the square
  is given by \( a \times (a + 1) \) and the last two digits are \( 25
  \). Here are some examples:
</p>
<ul>
  <li>\( 25^2 = 625. \) (Note that \( 2 \times 3 = 6. \))</li>
  <li>\( 85^2 = 7225. \) (Note that \( 8 \times 9 = 72. \))</li>
</ul>

<h2 id="squaring-a-2-digit-number-that-begins-with-5">Squaring a 2-Digit Number That Begins With 5<a href="#squaring-a-2-digit-number-that-begins-with-5"></a></h2>
<p>
  After learning the previous trick, I wondered if I could make more
  such tricks for myself. This is the first one I could come up with.
  If the first digit of a 2-digit number is \( 5 \) and the second
  digit is \( a \), then its square can be written as the result of \(
  25 + a \) followed by \( a^2 \). In other words, the first two
  digits of the square are obtained from the result of \( 25 + a \)
  and the last two digits are obtained from the result of \( a^2 \).
  Here are some examples:
</p>
<ul>
  <li>\( 52^2 = 2704. \) (Note that \( 25 + 2 = 27 \) and \( 2^2 = 4. \))</li>
  <li>\( 57^2 = 3249. \) (Note that \( 25 + 7 = 32 \) and \( 7^2 = 49. \))</li>
</ul>

<h2 id="squaring-any-number-that-ends-with-5">Squaring Any Number That Ends with 5<a href="#squaring-any-number-that-ends-with-5"></a></h2>
<p>
  Let us represent all digits except the last one as \( a \), e.g., if
  we are given the number \( 115 \), we say, \( a = 11 \). Then we can
  express the given number algebraically as \( 10a + 5 \). Note that
  the square of this number is

  \[
  (10a + 5)^2 = 100a(a + 1) + 25.
  \]

  In decimal representation, this amounts to writing the result of \(
  a(a + 1) \) followed by \( 25. \) Here are some examples:
</p>
<ul>
  <li>\( 115^2 = 13225. \) (Note that \( 11 \times 12 = 132. \))</li>
  <li>\( 9995^2 = 99900025. \) (Note that \( 999 \times 1000 = 999000. \))</li>
</ul>

<h2 id="squaring-any-number-that-begins-with-5">Squaring Any Number That Begins With 5<a href="#squaring-any-number-that-begins-with-5"></a></h2>
<p>
  Let us represent all digits except the first one as \( a \), e.g.,
  if we are given the number \( 512 \), we say, \( a = 12 \). Then we
  can express the given number algebraically as \( 5 \times 10^n + a
  \) where \( n \) is the number of digits in \( a \). Note that

  \[
  (5 \times 10^n + a)^2 = 25 \times 10^{2n} + 10^{n + 1} a + a^2.
  \]

  In decimal reprensetation, this amounts to performing the following
  steps:
</p>
<ol>
  <li>
    Write \( 25 \) as the first two digits.
  </li>
  <li>
    Then write \( a^2 \) as a \( 2n \)-digit number immediately after
    \( 25 \). Prefix \( a^2 \) with appropriate number of \( 0 \)s so
    that \( a^2 \) is written with \( 2n \) digits.
  </li>
  <li>
    Write the \( + \)-sign directly below the first digit, that is,
    write the \( + \)-sign directly before the first \( 2 \).
  </li>
  <li>
    Write every digit of \( a \) including any preceding \( 0 \)s
    immediately after the \( + \)-sign.
  </li>
  <li>
    Finally add the numbers in both rows column by column performing
    the carrying operation whenever necessary.
  </li>
</ol>
<p>
  Here are some examples:

  \[
  502^2 = \\
  \left\{ \begin{array}{cccccc}
  2 & 5 & 0 & 0 & 0 & 4 \\
  + & 0 & 2 \\
  \hline
  2 & 5 & 2 & 0 & 0 & 4
  \end{array} \right\} = 252004.
  \]

  \[
  512^2 = \\
  \left\{ \begin{array}{cccccc}
  2 & 5 & 0 & 1 & 1 & 4 \\
  + & 1 & 2 \\
  \hline
  2 & 6 & 2 & 1 & 1 & 4
  \end{array} \right\} = 262114.
  \]

  \[
  564^2 = \\
  \left\{ \begin{array}{cccccc}
  2 & 5 & 4 & 0 & 9 & 6 \\
  + & 6 & 4 \\
  \hline
  3 & 1 & 8 & 0 & 9 & 6 \\
  \end{array} \right\} = 318096.
  \]

</p>

<h2 id="applying-both-tricks-together">Applying Both Tricks Together<a href="#applying-both-tricks-together"></a></h2>
<p>
  Let us now see an example where we use both the tricks together. Let
  us find \( 5195^2 \). This is a number that begins with the digit \(
  5 \) as well as ends with the digit \( 5 \). We need to use the
  second trick to find \( 5195^2 \). But the second trick begins with
  writing \( 25 \) immediately followed by the result of \( 195^2 \),
  so we use the first trick to calculate \( 195^2 \).
</p>
<p>
  To write the result of \( 195^2 \), we first write \( 380 \) which
  we obtain as the result of \( 19 \times 20 \) and then we write \(
  25 \) immediately after it. Thus \( 195^2 = 38025 \). Now we
  perform the second trick as follows:

  \begin{align*}
  5195^2 =
  \left\{ \begin{array}{cccccccc}
  2 & 5 & 0 & 3 & 8 & 0 & 2 & 5 \\
  + & 1 & 9 & 5 \\
  \hline
  2 & 6 & 9 & 8 & 8 & 0 & 2 & 5
  \end{array} \right\} = 26988025.
  \end{align*}
</p>

<p><a href="https://susam.in/maze/squaring-numbers-that-begin-or-end-with-5.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 21 Dec 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Coefficient of Variation Function in PostgreSQL</title>
<link>https://susam.in/maze/coefficient-of-variation-function-in-postgresql.html</link>
<guid>https://susam.in/maze/coefficient-of-variation-function-in-postgresql.html</guid>
<description>
<![CDATA[
<p>
  Today I learnt how to create an aggregate function in PostgreSQL
  function that wraps the functionality provided by other aggregate
  functions in PosgreSQL. In this experiment, I created
  a <code>cv()</code> function that calculates the coefficient of
  variation. The function <code>cv(x)</code> is equivalent
  to <code>stddev(x)</code> / <code>avg(x)</code> where <code>x</code>
  represents the list of data points.
</p>

<h2 id="example-data-table">Example Data Table<a href="#example-data-table"></a></h2>
<pre>
<samp>$ <kbd>cat perf.sql</kbd>
CREATE TABLE performance
(
    name VARCHAR,
    duration DOUBLE PRECISION
);

INSERT INTO performance VALUES ('RAND', 101.0);
INSERT INTO performance VALUES ('ZERO', 157.0);
INSERT INTO performance VALUES ('NONE', 209.0);
INSERT INTO performance VALUES ('TEST', 176.0);
INSERT INTO performance VALUES ('UNIT', 197.0);
INSERT INTO performance VALUES ('LOAD', 193.0);
INSERT INTO performance VALUES ('FREE', 198.0);
$ <kbd>psql statistics</kbd>
psql (8.4.3)
Type "help" for help.
statistics=# <kbd>\i perf.sql</kbd>
DROP TABLE
CREATE TABLE
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
statistics=# <kbd>select * from performance;</kbd>
 name | duration
------+----------
 RAND |      101
 ZERO |      157
 NONE |      209
 TEST |      176
 UNIT |      197
 LOAD |      193
 FREE |      198
(7 rows)

statistics=#</samp>
</pre>
<h2 id="useful-details-to-create-our-function">Useful Details to Create Our Function<a href="#useful-details-to-create-our-function"></a></h2>
<pre>
<samp>statistics=# <kbd>SELECT aggtransfn, aggfinalfn, aggtranstype::regtype, agginitval</kbd>
statistics-# <kbd>FROM pg_aggregate</kbd>
statistics-# <kbd>WHERE aggfnoid='stddev(double precision)'::regprocedure;</kbd>
  aggtransfn  |     aggfinalfn     |    aggtranstype    | agginitval
--------------+--------------------+--------------------+------------
 float8_accum | float8_stddev_samp | double precision[] | {0,0,0}
(1 row)

statistics=# <kbd>SELECT aggtransfn, aggfinalfn, aggtranstype::regtype, agginitval</kbd>
statistics-# <kbd>FROM pg_aggregate</kbd>
statistics-# <kbd>WHERE aggfnoid='avg(double precision)'::regprocedure;</kbd>
  aggtransfn  | aggfinalfn |    aggtranstype    | agginitval
--------------+------------+--------------------+------------
 float8_accum | float8_avg | double precision[] | {0,0,0}
(1 row)

statistics=#</samp>
</pre>

<h2 id="function-definition">Function Definition<a href="#function-definition"></a></h2>
<pre>
<samp>$ <kbd>cat cv.sql</kbd>
CREATE OR REPLACE FUNCTION finalcv(double precision[])
RETURNS double precision
AS $$
    SELECT float8_stddev_samp($1) / float8_avg($1);
$$ LANGUAGE SQL;

CREATE AGGREGATE cv(double precision)
(
    sfunc = float8_accum,
    stype = double precision[],
    finalfunc = finalcv,
    initcond = '{0, 0, 0}'
);</samp>
</pre>

<h2 id="usage">Usage<a href="#usage"></a></h2>
<pre>
<samp>$ <kbd>psql statistics</kbd>
psql (8.4.3)
Type "help" for help.

statistics=# <kbd>select stddev(duration), avg(duration) from performance;</kbd>
      stddev      |       avg
------------------+------------------
 37.1682147873178 | 175.857142857143
(1 row)

statistics=# <kbd>select stddev(duration) / avg(duration) as cv from performance;</kbd>
        cv
-------------------
 0.211354592616754
(1 row)

statistics=# <kbd>\i cv.sql</kbd>
CREATE FUNCTION
CREATE AGGREGATE
statistics=# <kbd>select cv(duration) from performance;</kbd>
        cv
-------------------
 0.211354592616754
(1 row)

statistics=#</samp>
</pre>

<h2 id="bessel-correction">Bessel's Correction<a href="#bessel-correction"></a></h2>
<p>
  Checked whether
  <a href="http://en.wikipedia.org/wiki/Bessel's_correction">Bessel's
    correction</a> was used in the <code>stddev()</code> function of
  PostgreSQL. Yes, it was used.
</p>
<pre>
<samp>$ <kbd>octave -q</kbd>
octave:1&gt; <kbd>std([101, 157, 209, 176, 197, 193, 198], 0)</kbd>
ans =  37.168
octave:2&gt; <kbd>std([101, 157, 209, 176, 197, 193, 198], 1)</kbd>
ans =  34.411
octave:3&gt;</samp>
</pre>
<p>
  The <code>std()</code> function in MATLAB and GNU Octave applies
  Bessel's correction when invoked with the second argument
  as <code>0</code>.
</p>

<p><a href="https://susam.in/maze/coefficient-of-variation-function-in-postgresql.html">Read on website</a></p>
]]>
</description>
<pubDate>Thu, 13 May 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Minimal Installation of WinHTTP API</title>
<link>https://susam.in/maze/minimal-installation-of-winhttp-api.html</link>
<guid>https://susam.in/maze/minimal-installation-of-winhttp-api.html</guid>
<description>
<![CDATA[
<p>
  Here are the steps to perform for a minimal download and
  installation of WinHTTP API for C++ so that we have the
  the <code>winhttp.lib</code> and <code>winhttp.h</code> files while
  writing C++ programs using the WinHTTP API:
</p>
<ol>
  <li>Download PSDK-x86.exe
  from <a href="https://web.archive.org/web/20100507044252/http://www.microsoft.com/downloads/details.aspx?familyid=0BAF2B35-C656-4969-ACE8-E4C0C0716ADB&displaylang=en">Microsoft
      ® Windows Server® 2003 R2 Platform SDK Web Install</a>.
  </li>
  <li>
    Run the installer, select <em>Custom</em> installation type, clear
    all categories and select <em>Microsoft Windows Core SDK</em> &gt;
    <em>Build Environment</em> &gt; <em>Build Environment (x86
    32-bit)</em>.
  </li>
</ol>
<p>
  After the installation is complete, the <code>winhttp.h</code> file
  can be found at <code>C:\Program Files\Microsoft Platform SDK Server
    2003 R2\Include</code>.
</p>

<p><a href="https://susam.in/maze/minimal-installation-of-winhttp-api.html">Read on website</a></p>
]]>
</description>
<pubDate>Wed, 14 Apr 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Immediate SourceForge Tracker Notification</title>
<link>https://susam.in/maze/immediate-sourceforge-tracker-notification.html</link>
<guid>https://susam.in/maze/immediate-sourceforge-tracker-notification.html</guid>
<description>
<![CDATA[
<p>
  Here are the steps I followed to prevent the tracker email notification
  sent to a SourceForge mailing list address from being held for
  moderation.
</p>
<ol>
  <li>
    Navigate to <em>Mailman admin</em> &gt; <em>Privacy options</em>
    &gt; <em>Sender filters</em>. Then
    add <code>noreply@sourceforge.net</code> to the list of non-member
    addresses whose postings should be automatically accepted.
  </li>
  <li>
    Navigate to <em>Mailman admin</em> &gt; <em>Privacy options</em>
    &gt; <em>Recepient filters</em>. Then
    add <code>noreply@sourceforge.net</code> to alias names (regexps)
    which qualify as explicit to or cc destination names for this
    list.
  </li>
</ol>
<p>
  The first step was necessary because all emails sent by tracker
  has <code>noreply@sourceforge.net</code> as the <em>From</em> address.
</p>
<p>
  The second step was necessary because all emails sent by tracker
  has <code>noreply@sourceforge.net</code> as the <em>To</em> address.
</p>

<p><a href="https://susam.in/maze/immediate-sourceforge-tracker-notification.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate>
</item>


</channel>
</rss>
