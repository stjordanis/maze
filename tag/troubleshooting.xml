<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Troubleshooting Maze</title>
<link>https://susam.in/maze/</link>
<atom:link href="https://susam.in/maze/rss.xml"
           rel="self" type="application/rss+xml"/>
<description>Feed from Susam's Troubleshooting Maze</description>

<item>
<title>Correctly Printing STAFString</title>
<link>https://susam.in/maze/correctly-printing-stafstring.html</link>
<guid>https://susam.in/maze/correctly-printing-stafstring.html</guid>
<description>
<![CDATA[
<p>
  At RSA, we use <a href="http://staf.sourceforge.net/">Software
  Testing Automation Framework (STAF)</a> to automate testing our
  products. Recently, I ran into a bug that occurred due
  to <code>STAFResult::STAFString</code> not being null-terminated.
  Here is an example C++ program that demonstrates the issue:
</p>
<pre>
<code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

#include "STAF.h"
#include "STAFString.h"

int main(int argc, char **argv)
{
    STAFString name("foo");
    STAFHandlePtr handle;

    int rc = STAFHandle::create(name, handle);
    if (rc != 0) {
        std::cerr &lt;&lt; "Could not create STAF handle; error code: "
                  &lt;&lt; rc &lt;&lt; endl;
        return 1;
    }

    STAFResultPtr result = handle-&gt;submit("127.0.0.1", "VAR",
                                          "RESOLVE STRING {STAF/Env/DUMMY}");
    if (result-&gt;rc != 0) {
        std::cerr &lt;&lt; "Could not run STAF command; error code: "
                  &lt;&lt; rc &lt;&lt; "\n";
        return 1;
    }

    STAFString output = result-&gt;result;
    std::cout &lt;&lt; "Output: " &lt;&lt; output.buffer() &lt;&lt; "\n";
}</code>
</pre>
<p>
  Here is an example output of the above program:
</p>
<pre>
<samp>C:\&gt;<kbd>echo %DUMMY%</kbd>
Why__does__it__break
C:\&gt;<kbd>STAFExperiments.exe</kbd>
Output: Why__does__it__break/Env/DUMMY}}
</pre>
<p>
The substring <code>/Env/DUMMY</code> at the end of the output is
garbage. The result is not null-terminated in the output buffer. Here
is the correct way to print the output:
</p>
<pre>
<code>std::cout &lt;&lt; "Output: " &lt;&lt; string(output.buffer(), output.length()) &lt;&lt; "\n";</code>
</pre>

<p><a href="https://susam.in/maze/correctly-printing-stafstring.html">Read on website</a></p>
]]>
</description>
<pubDate>Fri, 04 Jun 2010 00:00:00 +0000</pubDate>
</item>
<item>
<title>Immediate SourceForge Tracker Notification</title>
<link>https://susam.in/maze/immediate-sourceforge-tracker-notification.html</link>
<guid>https://susam.in/maze/immediate-sourceforge-tracker-notification.html</guid>
<description>
<![CDATA[
<p>
  Here are the steps I followed to prevent the tracker email notification
  sent to a SourceForge mailing list address from being held for
  moderation.
</p>
<ol>
  <li>
    Navigate to <em>Mailman admin</em> &gt; <em>Privacy options</em>
    &gt; <em>Sender filters</em>. Then
    add <code>noreply@sourceforge.net</code> to the list of non-member
    addresses whose postings should be automatically accepted.
  </li>
  <li>
    Navigate to <em>Mailman admin</em> &gt; <em>Privacy options</em>
    &gt; <em>Recepient filters</em>. Then
    add <code>noreply@sourceforge.net</code> to alias names (regexps)
    which qualify as explicit to or cc destination names for this
    list.
  </li>
</ol>
<p>
  The first step was necessary because all emails sent by tracker
  has <code>noreply@sourceforge.net</code> as the <em>From</em> address.
</p>
<p>
  The second step was necessary because all emails sent by tracker
  has <code>noreply@sourceforge.net</code> as the <em>To</em> address.
</p>

<p><a href="https://susam.in/maze/immediate-sourceforge-tracker-notification.html">Read on website</a></p>
]]>
</description>
<pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate>
</item>


</channel>
</rss>
